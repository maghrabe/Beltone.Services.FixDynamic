using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Beltone.Services.Fix.Utilities;
using Beltone.Services.Fix.Service.Singletons;
using Beltone.Services.Fix.Contract;
using Beltone.Services.Fix.Contract.Entities.ResponseMessages;
using Beltone.Services.Fix.Contract.Interfaces;
using Beltone.Services.Fix.DataLayer;
using Beltone.Services.Fix.Entities.Entities;
using Beltone.Services.Fix.Entities.Constants;
using Beltone.Services.Fix.Contract.Entities;

namespace Beltone.Services.Fix.Service.Handlers.ResponseMessagesHandlers
{
    public class ExecutionReportResponseMessageHandler : IResponseMessageHandler<QuickFix.Message>
    {

        private static int m_msgTypeTag;
        private static string m_MsgTypeTagValueToHandle;
        private static Dictionary<string, ExecRepHandler> _ordStatus_internalHandler;

        #region IResponseMessageHandler<IResponseMessage> Members

        public void Initialize(string msgTypeTagValueToHandle)
        {
            m_MsgTypeTagValueToHandle = msgTypeTagValueToHandle;
            m_msgTypeTag = int.Parse(SystemConfigurations.GetAppSetting("MsgTypeTag"));
            _ordStatus_internalHandler = new Dictionary<string, ExecRepHandler>();
            _ordStatus_internalHandler.Add("A", new PendingNewExecHandler());
            _ordStatus_internalHandler.Add("0", new NewExecHandler());
            _ordStatus_internalHandler.Add("1", new PartialFillExecHandler());
            _ordStatus_internalHandler.Add("2", new FilledExecHandler());
            _ordStatus_internalHandler.Add("E", new PendingReplaceExecHandler());
            _ordStatus_internalHandler.Add("5", new ReplacedExecHandler());
            _ordStatus_internalHandler.Add("6", new PendingCancelExecHandler());
            _ordStatus_internalHandler.Add("4", new CanceledExecHandler());
            _ordStatus_internalHandler.Add("8", new RejectedExecHandler());
            _ordStatus_internalHandler.Add("9", new SuspendedExecHandler());
            _ordStatus_internalHandler.Add("C", new ExpiredExecHandler());
            _ordStatus_internalHandler.Add("D", new RestatedExecHandler());
        }


        public void Handle(QuickFix.Message msg)
        {
            try
            {
                // check message type tag, if execution report then push execution report update
                string msgTypeString = msg.getHeader().getField(m_msgTypeTag);
                if (msgTypeString == m_MsgTypeTagValueToHandle)
                {
                    Counters.IncrementCounter(CountersConstants.RcvExecRspMsgs);
                    //System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
                    //sw.Start();

                    // this adding execution returns false then it's already handled before
                    string execID = msg.getField(17);
                    if (!OrdersManager.AddExecutionID(execID))
                    {
                        return;
                    }

                    string execTypeFixValue = msg.getField(150);
                    LookupItem lookupExecType = null;
                    try
                    {
                        lookupExecType = Lookups.GetExecTypeLookup(execTypeFixValue);
                    }
                    catch
                    {
                        SystemLogger.WriteOnConsoleAsync(true, "Recieved unknown fix exec type : " + execTypeFixValue, ConsoleColor.Yellow, ConsoleColor.Red, true);
                        return;
                    }
                    string ExecType = lookupExecType.CodeValue;
                    string orderStatusFixValue = msg.getField(39);
                    LookupItem lookupOrderStatus = Lookups.GetExecTypeLookup(orderStatusFixValue);
                    string orderStatus = lookupOrderStatus.CodeValue;

                    // tag 37 (bourse OrderID) must be sent because it's generated by xstream
                    // tag 11 (ClorderID) is sent in case of new order
                    // EGX doesnt support PendingNew status

                    #region Suspended

                    if (orderStatusFixValue == "9") // suspended ==> Fix Value = 9
                    {
                        _ordStatus_internalHandler["9"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion Suspended

                    #region PendingNew

                    else if (orderStatusFixValue == "A" && execTypeFixValue == "A") // new ==> FixValue = 0
                    {
                        _ordStatus_internalHandler["A"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion New

                    #region New

                    else if (orderStatusFixValue == "0" && execTypeFixValue == "0") // new ==> FixValue = 0
                    {
                        _ordStatus_internalHandler["0"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion New

                    #region Restated

                    else if (orderStatusFixValue == "0" && execTypeFixValue == "D") // restated ==> FixValue = D
                    {
                        _ordStatus_internalHandler["D"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion Restated

                    #region Filled this condition should be placed before PartialFilled status

                    else if (orderStatusFixValue == "2" && execTypeFixValue == "2" ||
                        orderStatusFixValue == "2" && execTypeFixValue == "F") // filled ==> FixValue = 2
                    {
                        _ordStatus_internalHandler["2"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }


                    #endregion Filled

                    #region PartialFilled

                    else if (orderStatusFixValue == "1" && execTypeFixValue == "1" ||
                        orderStatusFixValue == "1" && execTypeFixValue == "F") // partially filled ==> FixValue = 1
                    {
                        _ordStatus_internalHandler["1"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion PartialFilled

                    #region Replaced

                    else if (orderStatusFixValue == "5" && execTypeFixValue == "5"
                        || orderStatusFixValue == "0" && execTypeFixValue == "5") // replaced ==> FixValue = 5
                    {
                        _ordStatus_internalHandler["5"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }
                    #endregion Replaced

                    #region Rejected

                    else if (orderStatusFixValue == "8" && execTypeFixValue == "8") // Rejected ==> FixValue = 8 
                    {
                        _ordStatus_internalHandler["8"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion Rejected

                    #region PendingReplace

                    else if (orderStatusFixValue == "E" && execTypeFixValue == "E") // Pending Replace ==> FixValue = 8 
                    {
                        _ordStatus_internalHandler["E"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion PendingReplace

                    #region PendingCancel

                    else if (orderStatusFixValue == "6" && execTypeFixValue == "6") // Pending Cancel ==> FixValue = 8 
                    {
                        _ordStatus_internalHandler["6"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion PendingCancel

                    #region Canceled

                    else if (orderStatusFixValue == "4" && execTypeFixValue == "4" ||
                        orderStatusFixValue == "3" && execTypeFixValue == "4") // >> Done For Day
                    {
                        _ordStatus_internalHandler["4"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion

                    #region Expired

                    else if (orderStatusFixValue == "C" || execTypeFixValue == "C") // Expired ==> FixValue = 8 
                    {
                        _ordStatus_internalHandler["C"].HandleExecRep(msg, orderStatus, ExecType, execID);
                    }

                    #endregion

                    #region Unhandled Execution
                    else // unhandled execution message
                    {
                        // you dont want the client to miss some update so do the following:
                        // compare executed quantities
                        // blocks conditions sequence is very important here 
                        // more than one condition in a block must be listed first 
                        // then one conditioned blocks
                        // fill and partial filled must be listed first
                        // fill must be listed before partial fill
                        // new status must be listed last
                        // replace / cancel before pendingreplace pending cancel
                        if (orderStatusFixValue == "2" || execTypeFixValue == "2") // Filled order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By FilledExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["2"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "1" || execTypeFixValue == "1") // PartialFill order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By PartialFillExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["1"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "4" || execTypeFixValue == "4") // Canceled order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By CanceledExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["4"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "5" || execTypeFixValue == "5") // replace order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By ReplaceExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["5"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "6" || execTypeFixValue == "6") // Pending Cancel order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By PendingCancelExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["6"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "E" || execTypeFixValue == "E") // PendingReplace order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By PendingReplaceExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["E"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (execTypeFixValue == "D") // restated
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By RestatedExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["D"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "A") // pending new status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By PendingNewExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["A"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "8") // Rejected order status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By RejectedExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["8"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else if (orderStatusFixValue == "0") // new status
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Handled By NewExecHandler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                            _ordStatus_internalHandler["0"].HandleExecRep(msg, orderStatus, ExecType, execID);
                        }
                        else
                        {
                            SystemLogger.WriteOnConsoleAsync(true, string.Format("WARNING!!! Unhandled Execution Report, Order Status [{0}], Exec Type [{1}], Exec ID {2} Couldnt specify a handler", orderStatus, ExecType, execID), ConsoleColor.Red, ConsoleColor.Yellow, true);
                        }


                    }

                    #endregion Unhandled Execution

                    //sw.Stop();
                    //SystemLogger.WriteOnConsoleAsync(true, string.Format("exec report of type {0} handled in {1} ms ", execTypeFixValue, sw.ElapsedMilliseconds), ConsoleColor.Yellow, ConsoleColor.Black, false);
                    //sw = null;
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, "Execution Report Response Handler Error" + ex.ToString(), ConsoleColor.Red, ConsoleColor.Black, true);
            }
        }


        #endregion

        #region IDisposable Members

        public void Dispose()
        {
            throw new NotImplementedException();
        }

        #endregion

        abstract class ExecRepHandler : IDisposable
        {
            public abstract void HandleExecRep(QuickFix.Message msg, params object[] parameters);
            public void PushResponses(string username, IResponseMessage[] responses)
            {
                if (responses != null && responses.Length > 0) { Sessions.Push(username, responses); }
            }

            public void Dispose()
            {
            }
        }

        class PendingNewExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                // in case of pending new you will get only the bourse order id
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                // find the order 

                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("PendingNew Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {
                        Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                        // find subscribed callbacks
                        // There can be exceptions to this rule when ExecType <150> and/or OrdStatus <39> are Canceled, 
                        // DoneForTheDay (e.g. on a day order), Expired, Calculated, or Rejected in which case 
                        // the order is no longer active and LeavesQty <151> could be 0. 

                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = 0;// msg.getInt(32);
                        //if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = 0;// msg.getDouble(31);
                        //if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);
                        //if (avgPrice == 0) { avgPrice = (double)order[SingleOrderProperties.AvgPrice]; }


                        string reason = string.Empty;
                        DateTime transactionDateTime = DateTime.Now;
                        Nullable<DateTime> expirationDateTime = null;
                        Nullable<DateTime> expirationDate = null;

                        if (msg.isSetField(103))
                        {
                            try
                            {
                                LookupItem lkupRej = Lookups.GetRejectionReasonLookup(msg.getField(103));
                                if (lkupRej != null)
                                {
                                    reason = lkupRej.MessageEn;
                                }
                            }
                            catch (Exception ex)
                            {
                                SystemLogger.LogErrorAsync(string.Format("RejectionExecRep Error getting rejection reson, fix value {0}, error: {1}", msg.getField(103), ex.ToString()));
                                reason = "couldn't get rejection reason ";
                            }
                        }
                        if (msg.isSetField(58)) { reason += msg.getField(58) + " "; }
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }
                        if (msg.isSetField(126)) { expirationDateTime = msg.getUtcTimeStamp(126); }
                        if (msg.isSetField(432)) { expirationDate = msg.getUtcDateOnly(432); }

                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_PendingNewResponse() { RequesterOrderID = requesterOrderID, OrderStatus = ordStatus });
                            PushResponses(username, responses.ToArray());
                        }


                        order[SingleOrderProperties.BourseOrderID] = bourseOrderID;
                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.OrigClOrdID] = order[SingleOrderProperties.ClOrderID];
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = false;
                        order[SingleOrderProperties.IsPending] = true;
                        order[SingleOrderProperties.Note] = "Awaiting for bourse acceptance";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                       order[SingleOrderProperties.ExpirationDate] = expirationDate;
                       order[SingleOrderProperties.ExpirationDateTime] = expirationDateTime;
                        order[SingleOrderProperties.OrderConfirmDateTime] = transactionDateTime;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, false);
                        orders_Columns.Add(SingleOrderProperties.Note, order[SingleOrderProperties.Note]);
                        orders_Columns.Add(SingleOrderProperties.IsPending, true);
                        orders_Columns.Add(SingleOrderProperties.IsAcceptedByBourse, false);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        orders_Columns.Add(SingleOrderProperties.OrderConfirmDateTime, transactionDateTime);
                        if (expirationDate.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDateTime, expirationDateTime); }
                        if (expirationDateTime.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDate, expirationDate); }

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Pending New");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        // ordersDetails_Columns.Add(SingleOrdDetailsProps.IsNewOrderResponse, false);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);


                        if (order[SingleOrderProperties.BourseOrderID] != null)
                        {
                            Dictionary<string, object> keys = new Dictionary<string, object>();
                            keys.Add(SingleOrderProperties.OrderID, Convert.ToInt64(order[SingleOrderProperties.OrderID]));
                            Dictionary<string, object> updates = new Dictionary<string, object>();
                            updates.Add(SingleOrderProperties.BourseOrderID, bourseOrderID);
                            db.UpdateRecord(SingleOrderProperties.TableName, updates, keys, ConStrongKeys.FixDbCon);

                            //db.UpdateBourseOrderID(Convert.ToInt64(order[SingleOrderProperties.OrderID]), order[SingleOrderProperties.BourseOrderID].ToString());
                        }
                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-PendingNew Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class NewExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.NewExecRspMsgs);
                string orderStatus = parameters[0].ToString();
                string ExecType = parameters[1].ToString();
                string execID = parameters[2].ToString();

                try
                {
                    // in case of pending new you will get only the bourse order id
                    // find the order 

                    SingleOrder order = null;

                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }

                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);

                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("New Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }
                    lock (order)
                    {
                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = 0;//msg.getInt(32);
                        //if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = 0;
                        //if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        DateTime transactionDateTime = DateTime.Now;
                        Nullable<DateTime> expirationDateTime = null;
                        Nullable<DateTime> expirationDate = null;

                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }
                        if (msg.isSetField(126)) { expirationDateTime = msg.getUtcTimeStamp(126); }
                        if (msg.isSetField(432)) { expirationDate = msg.getUtcDateOnly(432); }

                        bool aon = false;
                        int? minQty = null;
                        if (msg.isSetField(18))
                            if (msg.getChar(18) == QuickFix.ExecInst.ALL_OR_NONE)
                            {
                                aon = true;
                                if (msg.isSetField(110))
                                    minQty = msg.getInt(110);
                            }

                        OptionalFields opFields = new OptionalFields() { Fields = new List<Fix_Field>() };
                        opFields.Fields.Add(new Fix_Field() { Key = "BourseOrdID", Value = bourseOrderID });
                        if (expirationDateTime.HasValue)
                            opFields.Fields.Add(new Fix_Field() { Key = "ExpirationDateTime", Value = expirationDateTime.Value });
                        if (expirationDate.HasValue)
                            opFields.Fields.Add(new Fix_Field() { Key = "ExpirationDate", Value = expirationDate.Value });
                        if (aon && minQty.HasValue)
                        {
                            opFields.Fields.Add(new Fix_Field() { Key = "AON", Value = aon });
                            opFields.Fields.Add(new Fix_Field() { Key = "MinQty", Value = minQty.Value });
                        }
                        else
                            opFields.Fields.Add(new Fix_Field() { Key = "AON", Value = false });

                        if (opFields.Fields.Count == 0)
                            opFields = null;


                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderAcceptedResponse() { Msg = orderStatus, ReqOrdID = requesterOrderID, OrdStatus = orderStatus, CurrQty = currQ, CurrPrc = price, RemQty = remQ, ExecQty = totalExecQ, LastExecPrc = execPrice, LastExecQty = thisTradeExecQ, AvgPrc = avgPrice, OptionalFields = opFields });
                            PushResponses(username, responses.ToArray());
                            if (opFields != null)
                            {
                                opFields.Fields.Clear();
                                opFields = null;
                            }
                        }


                        order[SingleOrderProperties.BourseOrderID] = bourseOrderID;
                        order[SingleOrderProperties.OrderStatus] = orderStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = orderStatus;
                        order[SingleOrderProperties.ExecType] = ExecType;
                        order[SingleOrderProperties.OrigClOrdID] = order[SingleOrderProperties.ClOrderID];
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.OriginalPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.OriginalQuantity] = currQ;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = true;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.Note] = "Order has been accepted";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                      order[SingleOrderProperties.ExpirationDate] = expirationDate;
                      order[SingleOrderProperties.ExpirationDateTime] = expirationDateTime;
                        order[SingleOrderProperties.OrderConfirmDateTime] = transactionDateTime;
                        order[SingleOrderProperties.AON] = aon;
                        order[SingleOrderProperties.MinQty] = minQty ?? 0;




                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.BourseOrderID, order[SingleOrderProperties.BourseOrderID]);

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.AON, aon);
                        orders_Columns.Add(SingleOrderProperties.MinQty, minQty ?? 0);

                        orders_Columns.Add(SingleOrderProperties.ExecType, ExecType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, orderStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, orderStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, true);
                        orders_Columns.Add(SingleOrderProperties.Note, "Order has been accepted");
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.IsAcceptedByBourse, true);


                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        orders_Columns.Add(SingleOrderProperties.OrderConfirmDateTime, transactionDateTime);
                        if (expirationDate.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDateTime, expirationDateTime); }
                        if (expirationDateTime.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDate, expirationDate); }

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, ExecType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, orderStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order has been accepted");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AON, aon);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.MinQty, minQty ?? 0);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsNewOrderResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderType, order[SingleOrderProperties.OrderType]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.TimeInForce, order[SingleOrderProperties.TimeInForce]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.HandleInst, order[SingleOrderProperties.HandleInst]);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);




                        if (!string.IsNullOrEmpty((string)order[SingleOrderProperties.BourseOrderID]))
                        {
                            Dictionary<string, object> keys = new Dictionary<string, object>();
                            keys.Add(SingleOrderProperties.OrderID, Convert.ToInt64(order[SingleOrderProperties.OrderID]));
                            Dictionary<string, object> updates = new Dictionary<string, object>();
                            updates.Add(SingleOrderProperties.BourseOrderID, bourseOrderID);
                            db.UpdateRecord(SingleOrderProperties.TableName, updates, keys, ConStrongKeys.FixDbCon);

                            //db.UpdateBourseOrderID((long)order[SingleOrderProperties.OrderID], (string)order[SingleOrderProperties.BourseOrderID]);
                        }
                        ////////db.UpdateOrderDetails(order.OrderID, order.ClOrderID, order.OrigClOrdID, currQ == 0 ? order.CurrentQuantity : currQ, remQ, exeQ, price == 0 ? order.CurrentPrice : price, execPrice, avgPrice, Lookups.GetOrderTypeLookup(orderType).CodeValue, Lookups.GetOrderStatusLookup(status).CodeValue, Lookups.GetExecTypeLookup(exeType).CodeValue, DateTime.Now, "Order has been accepted", false, "", timeInForce == string.Empty ? order.TimeInForce : Lookups.GetTimeInForceLookup(timeInForce).CodeValue, execID);
                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-New ExecID {0} : {1}", execID, ex.ToString()));
                }
            }
        }

        class RestatedExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.NewExecRspMsgs);
                string orderStatus = parameters[0].ToString();
                string ExecType = parameters[1].ToString();
                string execID = parameters[2].ToString();

                try
                {
                    SingleOrder order = null;

                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }

                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);

                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("Restated Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {

                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        DateTime transactionDateTime = DateTime.Now;
                        Nullable<DateTime> expirationDateTime = null;
                        Nullable<DateTime> expirationDate = null;

                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }
                        if (msg.isSetField(126)) { expirationDateTime = msg.getUtcTimeStamp(126); }
                        if (msg.isSetField(432)) { expirationDate = msg.getUtcDateOnly(432); }

                        bool aon = false;
                        int? minQty = null;
                        if (msg.isSetField(18))
                            if (msg.getChar(18) == QuickFix.ExecInst.ALL_OR_NONE)
                            {
                                aon = true;
                                if (msg.isSetField(110))
                                    minQty = msg.getInt(110);
                            }

                        OptionalFields opFields = new OptionalFields() { Fields = new List<Fix_Field>() };
                        if (expirationDateTime.HasValue)
                            opFields.Fields.Add(new Fix_Field() { Key = "ExpirationDateTime", Value = expirationDateTime.Value });
                        if (expirationDate.HasValue)
                            opFields.Fields.Add(new Fix_Field() { Key = "ExpirationDate", Value = expirationDate.Value });

                        opFields.Fields.Add(new Fix_Field() { Key = "AON", Value = aon });
                        if (aon)
                            opFields.Fields.Add(new Fix_Field() { Key = "MinQty", Value = minQty.Value });

                        if (opFields.Fields.Count == 0)
                            opFields = null;


                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderRestatedResponse() { Msg = "Order has been restated externally", ReqOrdID = requesterOrderID, OrdStatus = orderStatus, CurrQty = currQ, CurrPrc = price, RemQty = remQ, ExecQty = totalExecQ, LastExecPrc = execPrice, LastExecQty = thisTradeExecQ, AvgPrc = avgPrice, OptionalFields = opFields });
                            PushResponses(username, responses.ToArray());
                            if (opFields != null)
                            {
                                opFields.Fields.Clear();
                                opFields = null;
                            }
                        }


                        order[SingleOrderProperties.BourseOrderID] = bourseOrderID;
                        order[SingleOrderProperties.OrderStatus] = orderStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = orderStatus;
                        order[SingleOrderProperties.ExecType] = ExecType;
                        order[SingleOrderProperties.OrigClOrdID] = order[SingleOrderProperties.ClOrderID];
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.OriginalPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.OriginalQuantity] = currQ;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = true;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.Note] = "Order has been restated externally";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                       order[SingleOrderProperties.ExpirationDate] = expirationDate;
                       order[SingleOrderProperties.ExpirationDateTime] = expirationDateTime;
                        order[SingleOrderProperties.OrderConfirmDateTime] = transactionDateTime;
                        order[SingleOrderProperties.AON] = aon;
                        order[SingleOrderProperties.MinQty] = minQty ?? 0;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.BourseOrderID, order[SingleOrderProperties.BourseOrderID]);

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.AON, aon);
                        orders_Columns.Add(SingleOrderProperties.MinQty, minQty ?? 0);

                        orders_Columns.Add(SingleOrderProperties.ExecType, ExecType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, orderStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, orderStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, true);
                        orders_Columns.Add(SingleOrderProperties.Note, "Order has been restated externally");
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.IsAcceptedByBourse, true);


                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        orders_Columns.Add(SingleOrderProperties.OrderConfirmDateTime, transactionDateTime);
                        if (expirationDate.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDateTime, expirationDateTime); }
                        if (expirationDateTime.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDate, expirationDate); }

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, ExecType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, orderStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order has been restated externally");


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsNewOrderResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AON, aon);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.MinQty, minQty ?? 0);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);




                        if (!string.IsNullOrEmpty((string)order[SingleOrderProperties.BourseOrderID]))
                        {
                            Dictionary<string, object> keys = new Dictionary<string, object>();
                            keys.Add(SingleOrderProperties.OrderID, Convert.ToInt64(order[SingleOrderProperties.OrderID]));
                            Dictionary<string, object> updates = new Dictionary<string, object>();
                            updates.Add(SingleOrderProperties.BourseOrderID, bourseOrderID);
                            db.UpdateRecord(SingleOrderProperties.TableName, updates, keys, ConStrongKeys.FixDbCon);
                            //db.UpdateBourseOrderID((long)order[SingleOrderProperties.OrderID], (string)order[SingleOrderProperties.BourseOrderID]);
                        }
                        ////////db.UpdateOrderDetails(order.OrderID, order.ClOrderID, order.OrigClOrdID, currQ == 0 ? order.CurrentQuantity : currQ, remQ, exeQ, price == 0 ? order.CurrentPrice : price, execPrice, avgPrice, Lookups.GetOrderTypeLookup(orderType).CodeValue, Lookups.GetOrderStatusLookup(status).CodeValue, Lookups.GetExecTypeLookup(exeType).CodeValue, DateTime.Now, "Order has been accepted", false, "", timeInForce == string.Empty ? order.TimeInForce : Lookups.GetTimeInForceLookup(timeInForce).CodeValue, execID);
                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Restated ExecID {0} : {1}", execID, ex.ToString()));
                }
            }
        }

        class FilledExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.FilledExecRspMsgs);

                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();

                try
                {

                    SingleOrder order = null;

                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }

                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);

                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("Filled Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {

                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);
                        DateTime transactionDateTime = DateTime.Now;

                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }


                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_ExecutionReport() { RequesterOrderID = requesterOrderID, CurrentQty = currQ, CurrPrice = price, OrderStatus = ordStatus, TotalExecutedQuantity = totalExecQ, RemainingQuantity = remQ, TradeExecutedQuantity = thisTradeExecQ, AvgPrice = avgPrice, ExecPrice = execPrice, IsActive = false, IsCompleted = true, IsExecuted = true });
                            PushResponses(username, responses.ToArray());
                        }

                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.IsActive] = false;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.IsExecuted] = true;
                        order[SingleOrderProperties.IsCompleted] = true;
                        order[SingleOrderProperties.Note] = "Order Filled";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, false);
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.IsExecuted, true);
                        orders_Columns.Add(SingleOrderProperties.IsCompleted, true);
                        orders_Columns.Add(SingleOrderProperties.Note, "Order Filled");


                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order Filled");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);

                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);
                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Filled Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class PartialFillExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.PartialFilledExecRspMsgs);
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }

                    string bourseOrderID = msg.getField(37);

                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);

                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("PartialFill Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    // find subscribed callbacks
                    // There can be exceptions to this rule when ExecType <150> and/or OrdStatus <39> are Canceled, 
                    // DoneForTheDay (e.g. on a day order), Expired, Calculated, or Rejected in which case 
                    // the order is no longer active and LeavesQty <151> could be 0. 
                    lock (order)
                    {
                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);
                        DateTime transactionDateTime = DateTime.Now;


                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_ExecutionReport() { RequesterOrderID = requesterOrderID, CurrentQty = currQ, CurrPrice = price, OrderStatus = ordStatus, TotalExecutedQuantity = totalExecQ, RemainingQuantity = remQ, TradeExecutedQuantity = thisTradeExecQ, IsActive = true, IsCompleted = false, IsExecuted = false, AvgPrice = avgPrice, ExecPrice = execPrice });
                            PushResponses(username, responses.ToArray());
                        }

                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.IsActive] = true;
                        order[SingleOrderProperties.IsExecuted] = false;
                        order[SingleOrderProperties.Note] = "Order Partially Filled";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, true);
                        orders_Columns.Add(SingleOrderProperties.IsExecuted, false);
                        orders_Columns.Add(SingleOrderProperties.Note, "Order Partially Filled");

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order Partially Filled");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);


                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-PartialFilled Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class PendingReplaceExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.PendingReplaceExecRspMsgs);
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();

                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("PendingReplace Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {


                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        string orderType = string.Empty;
                        if (msg.isSetField(40)) { orderType = Lookups.GetOrderTypeLookup(msg.getField(40)).CodeValue; } else { orderType = order[SingleOrderProperties.OrderType].ToString(); }
                        string timeInForce = string.Empty;
                        if (msg.isSetField(59)) { timeInForce = Lookups.GetTimeInForceLookup(msg.getField(59)).CodeValue; } else { timeInForce = order[SingleOrderProperties.TimeInForce].ToString(); }

                        DateTime transactionDateTime = DateTime.Now;
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }
                        Nullable<DateTime> expirationDateTime = null;
                        if (msg.isSetField(126)) { expirationDateTime = msg.getUtcTimeStamp(126); }
                        Nullable<DateTime> expirationDate = null;
                        if (msg.isSetField(432)) { expirationDate = msg.getUtcDateOnly(432); }

                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_PendingReplaceResponse() { RequesterOrderID = requesterOrderID, OrderStatus = ORD_STATUS.PendingReplace });
                            PushResponses(username, responses.ToArray());
                        }


                        // dont change OriginalOrderStatus in pending conditions
                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.IsPending] = true;
                        order[SingleOrderProperties.Note] = "Pending Replace";
                        order[SingleOrderProperties.TimeInForce] = timeInForce;
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                       order[SingleOrderProperties.ExpirationDate] = expirationDate;
                       order[SingleOrderProperties.ExpirationDateTime] = expirationDateTime;

                        DatabaseMethods db = new DatabaseMethods();
                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.Note, "Pending Replace");

                        orders_Columns.Add(SingleOrderProperties.IsPending, true);
                        orders_Columns.Add(SingleOrderProperties.IsActive, true);

                        orders_Columns.Add(SingleOrderProperties.TimeInForce, timeInForce);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        orders_Columns.Add(SingleOrderProperties.OrderConfirmDateTime, transactionDateTime);
                        if (expirationDate.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDateTime, expirationDateTime); }
                        if (expirationDateTime.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDate, expirationDate); }

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Pending Replace");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderType, orderType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.TimeInForce, timeInForce);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsModifyResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);

                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-PendingReplace Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class ReplacedExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                Counters.IncrementCounter(CountersConstants.ReplacedExecRspMsgs);
                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("Replaced Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {
                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        string orderType = string.Empty;
                        if (msg.isSetField(40)) { orderType = Lookups.GetOrderTypeLookup(msg.getField(40)).CodeValue; } else { orderType = order[SingleOrderProperties.OrderType].ToString(); }
                        string timeInForce = string.Empty;
                        if (msg.isSetField(59)) { timeInForce = Lookups.GetTimeInForceLookup(msg.getField(59)).CodeValue; } else { timeInForce = order[SingleOrderProperties.TimeInForce].ToString(); }

                        DateTime transactionDateTime = DateTime.Now;
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }
                        Nullable<DateTime> expirationDateTime = null;
                        if (msg.isSetField(126)) { expirationDateTime = msg.getUtcTimeStamp(126); }
                        Nullable<DateTime> expirationDate = null;
                        if (msg.isSetField(432)) { expirationDate = msg.getUtcDateOnly(432); }

                        bool aon = false;
                        int? minQty = null;
                        if (msg.isSetField(18))
                            if (msg.getChar(18) == QuickFix.ExecInst.ALL_OR_NONE)
                            {
                                aon = true;
                                if (msg.isSetField(110))
                                    minQty = msg.getInt(110);
                            }

                        OptionalFields opFields = new OptionalFields() { Fields = new List<Fix_Field>() };
                        opFields.Fields.Add(new Fix_Field() { Key = "BourseOrdID", Value = bourseOrderID });
                        if (expirationDateTime.HasValue)
                            opFields.Fields.Add(new Fix_Field() { Key = "ExpirationDateTime", Value = expirationDateTime.Value });
                        if (expirationDate.HasValue)
                            opFields.Fields.Add(new Fix_Field() { Key = "ExpirationDate", Value = expirationDate.Value });

                        opFields.Fields.Add(new Fix_Field() { Key = "AON", Value = aon });
                        if (aon)
                            opFields.Fields.Add(new Fix_Field() { Key = "MinQty", Value = minQty.Value });

                        if (opFields.Fields.Count == 0)
                            opFields = null;


                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderReplacedResponse() { ReqOrdID = requesterOrderID, OrdStatus = ordStatus, ExecQty = totalExecQ, Prc = price, Qty = currQ, RemQty = remQ, OrdTyp = orderType, TIF = timeInForce, Side = order[SingleOrderProperties.OrderSide].ToString(), OptionalFields = opFields });
                            PushResponses(username, responses.ToArray());
                            if (opFields != null)
                            {
                                opFields.Fields.Clear();
                                opFields = null;
                            }
                        }

                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.OrigClOrdID] = order[SingleOrderProperties.ClOrderID];
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.IsActive] = true;
                        order[SingleOrderProperties.IsExecuted] = false;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.Note] = "Bourse accepted order modifications";
                        order[SingleOrderProperties.TimeInForce] = orderType;
                        order[SingleOrderProperties.TimeInForce] = timeInForce;
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                      order[SingleOrderProperties.ExpirationDate] = expirationDate;
                       order[SingleOrderProperties.ExpirationDateTime] = expirationDateTime;
                        order[SingleOrderProperties.AON] = aon;
                        order[SingleOrderProperties.MinQty] = minQty ?? 0;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.AON, aon);
                        orders_Columns.Add(SingleOrderProperties.MinQty, minQty ?? 0);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, true);
                        orders_Columns.Add(SingleOrderProperties.IsExecuted, false);
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.Note, "Bourse accepted order modifications");

                        orders_Columns.Add(SingleOrderProperties.OrderType, orderType);
                        orders_Columns.Add(SingleOrderProperties.TimeInForce, timeInForce);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        if (expirationDate.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDateTime, expirationDateTime); }
                        if (expirationDateTime.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDate, expirationDate); }

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);
                        if (minQty.HasValue)
                        {
                            ordersDetails_Columns.Add(SingleOrdDetailsProps.AON, aon);
                            ordersDetails_Columns.Add(SingleOrdDetailsProps.MinQty, minQty.Value);
                        }
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Bourse accepted order modifications");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsModifyResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderType, orderType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.TimeInForce, timeInForce);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);

                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);
                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Replaced Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class PendingCancelExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.PendingCancelExecRspMsgs);
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                // find the order 
                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("PendingCancel Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }
                    lock (order)
                    {
                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }

                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        DateTime transactionDateTime = DateTime.Now;

                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }

                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_PendingCancelResponse() { RequesterOrderID = requesterOrderID, OrderStatus = ORD_STATUS.PendingCancel });
                            PushResponses(username, responses.ToArray());
                        }

                        // dont change OriginalOrderStatus in pending conditions
                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.IsPending] = true;
                        order[SingleOrderProperties.Note] = "Pending Cancel";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.Note, "Pending Cancel");

                        orders_Columns.Add(SingleOrderProperties.IsPending, true);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        orders_Columns.Add(SingleOrderProperties.OrderConfirmDateTime, transactionDateTime);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Pending Cancel");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsCancelResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);


                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-PendingCancel Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class CanceledExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.CanceledExecRspMsgs);
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                int McdsAllocQty = 0;
                long orderID = 0;

                try
                {
                 
                    
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                         orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("Canceled Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    try
                    {
                        McdsAllocQty = Convert.ToInt32(order[SingleOrderProperties.RemainingQuantity]);

                    }

                    catch(Exception exp)
                    {
                        SystemLogger.LogErrorAsync(string.Format("Error, couldnt read remaining quantity of order {0}, Error : {1}",orderID , exp.ToString()));
                    }


                    lock (order)
                    {

                      
                        
                        
                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        DateTime transactionDateTime = DateTime.Now;
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }

                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderCanceledResponse() { RequesterOrderID = requesterOrderID, Message = "Order has been Canceled", OrderStatus = ordStatus });
                            PushResponses(username, responses.ToArray());
                        }

                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.OrigClOrdID] = order[SingleOrderProperties.ClOrderID];
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = false;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.IsCanceled] = true;
                        order[SingleOrderProperties.Note] = "Order Canceled";
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;

                        DatabaseMethods db = new DatabaseMethods();
                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, false);
                        orders_Columns.Add(SingleOrderProperties.IsCanceled, true);
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.Note, "Order Canceled");


                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order Canceled");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsCancelResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                        db = null;


                        #region Handle Mcsd clear allocation

                       // long orderid = -1;
                        try
                        {


                            bool _AllowMcsdAllocation = Convert.ToBoolean(SystemConfigurations.GetAppSetting("AllowMcsdAllocation"));

                            string activeAllocationActions = SystemConfigurations.GetAppSetting("ActiveAllocationsActions").ToString();


                            List<string> _ActiveAllocationActions = activeAllocationActions.Split(',').ToList();

                            if (_AllowMcsdAllocation == true && _ActiveAllocationActions.Contains(ORDER_TYP.Cancel))
                            {
                                if (order[SingleOrderProperties.IsMcsdAllocRequired] != null)
                                {
                                    if (Convert.ToBoolean(order[SingleOrderProperties.IsMcsdAllocRequired]) == true)
                                    {
                                     //   int mcsdQty = Convert.ToInt32(order[SingleOrderProperties.Alloc_McsdQuantity]);
                                    //    orderid = Convert.ToInt64(order[SingleOrderProperties.OrderID]);
                                        OrdersManager.CancelOrderMCSD(orderID, -McdsAllocQty);
                                    }
                                }
                            }
                        }
                        catch (Exception exp)
                        {
                            Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                            SystemLogger.LogErrorAsync(string.Format("Error, Cancel MCSD Order {0}, Error : {1}", orderID, exp.ToString()));
                        }
                        #endregion
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Canceled Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class RejectedExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                long orderID = -1;
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                Counters.IncrementCounter(CountersConstants.RejectedExecRspMsgs);
                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                         orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("RejectedExcReport Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {

                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = 0;
                        //if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }

                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = 0;//msg.getDouble(31);
                        //if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        string reason = string.Empty;
                        DateTime transactionDateTime = DateTime.Now;

                        if (msg.isSetField(103))
                        {
                            try
                            {
                                LookupItem lkupRej = Lookups.GetRejectionReasonLookup(msg.getField(103));
                                if (lkupRej != null)
                                {
                                    reason = lkupRej.MessageEn;
                                }
                            }
                            catch (Exception ex)
                            {
                                SystemLogger.LogErrorAsync(string.Format("RejectionExecRep Error getting rejection reson, fix value {0}, error: {1}", msg.getField(103), ex.ToString()));
                                reason = "couldn't get rejection reason ";
                            }
                        }
                        if (msg.isSetField(58)) { reason += msg.getField(58); }
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }

                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderRejectionResponse() { RejectionReason = reason, RequesterOrderID = requesterOrderID, OrderStatus = ordStatus });
                            PushResponses(username, responses.ToArray());
                        }

                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = false;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.IsRejected] = true;
                        order[SingleOrderProperties.Note] = "Order has been rejected";
                        order[SingleOrderProperties.RejectionReason] = reason;
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                        order[SingleOrderProperties.ActionOnAllocResponse] = ActionOnAllocResponse.DoNothing;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, false);
                        orders_Columns.Add(SingleOrderProperties.IsRejected, true);
                       orders_Columns.Add(SingleOrderProperties.Note, "Order has been rejected");
                        orders_Columns.Add(SingleOrderProperties.RejectionReason, reason);
                        orders_Columns.Add(SingleOrderProperties.IsAcceptedByBourse, false);
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                       orders_Columns.Add(SingleOrderProperties.ActionOnAllocResponse,ActionOnAllocResponse.DoNothing);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order has been rejected");
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RejectionReason, reason);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsNewOrderResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);

                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                        db = null;



                        #region Handle Mcsd Reset Allocation


                        try
                        {
                            if (order[SingleOrderProperties.IsMcsdAllocRequired] != null)
                            {
                                if (Convert.ToBoolean(order[SingleOrderProperties.IsMcsdAllocRequired]) == true)
                                {
                                       int mcsdQty = Convert.ToInt32(order[SingleOrderProperties.McsdrAllocQty]);
                                    
                                     //  orderid = Convert.ToInt64(order[SingleOrderProperties.OrderID]);
                                    OrdersManager.HandleRejectedOrderAllocation(orderID, mcsdQty);
                                }
                            }
                        }
                        catch (Exception exp)
                        {
                            Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                            SystemLogger.LogErrorAsync(string.Format("Error, Reset MCSD allocation of Order {0}, Error : {1}", orderID, exp.ToString()));
                        }
                        #endregion
                    
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Rejected Order ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class SuspendedExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.SuspendedExecRspMsgs);
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();

                try
                {

                    SingleOrder order = null;

                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }

                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);

                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("Suspended Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {
                        // find subscribed callbacks

                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);

                        string reason = string.Empty;
                        DateTime transactionDateTime = DateTime.Now;
                        if (msg.isSetField(103))
                        {
                            try
                            {
                                LookupItem lkupRej = Lookups.GetRejectionReasonLookup(msg.getField(103));
                                if (lkupRej != null)
                                {
                                    reason = lkupRej.MessageEn;
                                }
                            }
                            catch (Exception ex)
                            {
                                SystemLogger.LogErrorAsync(string.Format("RejectionExecRep Error getting rejection reson, fix value {0}, error: {1}", msg.getField(103), ex.ToString()));
                                reason = "couldn't get rejection reason ";
                            }
                        }
                        if (msg.isSetField(58)) { reason += msg.getField(58); }
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }


                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderSuspensionResponse() { Message = reason, RequesterOrderID = requesterOrderID, OrderStatus = ordStatus });
                            PushResponses(username, responses.ToArray());
                        }

                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = false;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.IsSuspended] = true;
                        order[SingleOrderProperties.IsExecuted] = false;
                        order[SingleOrderProperties.IsCompleted] = false;
                        order[SingleOrderProperties.Note] = ORD_STATUS.Suspended;
                        order[SingleOrderProperties.SuspensionReason] = reason;
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, false);
                        orders_Columns.Add(SingleOrderProperties.IsSuspended, true);
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.IsCompleted, false);
                        orders_Columns.Add(SingleOrderProperties.IsExecuted, false);
                        orders_Columns.Add(SingleOrderProperties.Note, ORD_STATUS.Suspended);
                        orders_Columns.Add(SingleOrderProperties.SuspensionReason, reason);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, ORD_STATUS.Suspended);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.SuspensionReason, reason);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Suspended ExecID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

        class ExpiredExecHandler : ExecRepHandler
        {
            public override void HandleExecRep(QuickFix.Message msg, params object[] parameters)
            {
                Counters.IncrementCounter(CountersConstants.ExpiredExecRspMsgs);
                // in case of pending new you will get only the bourse order id
                string ordStatus = parameters[0].ToString();
                string execType = parameters[1].ToString();
                string execID = parameters[2].ToString();
                // find the order 

                try
                {
                    SingleOrder order = null;
                    if (msg.isSetField(11))
                    {
                        long orderID = Convert.ToInt64(msg.getField(11).Split(new char[] { '-' })[0]);
                        order = OrdersManager.GetOrder(orderID);
                    }
                    string bourseOrderID = msg.getField(37);
                    if (order == null)
                        order = OrdersManager.GetOrder(bourseOrderID);
                    if (order == null)
                    {
                        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                        SystemLogger.LogErrorAsync(string.Format("Expired Error: order BourseOrderID {0} not found !", bourseOrderID));
                        return;
                    }

                    lock (order)
                    {

                        int totalExecQ = msg.getInt(14);
                        int remQ = msg.getInt(151);
                        int thisTradeExecQ = msg.getInt(32);
                        if (thisTradeExecQ == 0) { thisTradeExecQ = order[SingleOrderProperties.LastExecQuantity] == null ? 0 : (int)order[SingleOrderProperties.LastExecQuantity]; }
                        int currQ = 0; if (msg.isSetField(38)) { currQ = msg.getInt(38); }
                        if (currQ == 0) { currQ = (int)order[SingleOrderProperties.CurrentQuantity]; }


                        double price = 0;
                        if (msg.isSetField(44)) { price = Convert.ToDouble(msg.getField(44)); }
                        if (price == 0) { price = (double)order[SingleOrderProperties.CurrentPrice]; }
                        double execPrice = msg.getDouble(31);
                        if (execPrice == 0) { execPrice = order[SingleOrderProperties.LastExecPrice] == null ? 0 : Convert.ToDouble(order[SingleOrderProperties.LastExecPrice]); }
                        double avgPrice = msg.getDouble(6);
                        //if (avgPrice == 0) { avgPrice = (double)order[SingleOrderProperties.AvgPrice]; }

                        string orderType = string.Empty;
                        if (msg.isSetField(40)) { orderType = Lookups.GetOrderTypeLookup(msg.getField(40)).CodeValue; } else { orderType = order[SingleOrderProperties.OrderType].ToString(); }
                        string timeInForce = string.Empty;
                        if (msg.isSetField(59)) { timeInForce = Lookups.GetTimeInForceLookup(msg.getField(59)).CodeValue; } else { timeInForce = order[SingleOrderProperties.TimeInForce].ToString(); }


                        DateTime transactionDateTime = DateTime.Now;
                        Nullable<DateTime> expirationDateTime = null;
                        Nullable<DateTime> expirationDate = null;
                        if (msg.isSetField(60)) { transactionDateTime = msg.getUtcTimeStamp(60); }
                        if (msg.isSetField(126)) { expirationDateTime = msg.getUtcTimeStamp(126); }
                        if (msg.isSetField(432)) { expirationDate = msg.getUtcDateOnly(432); }

                        string username = OrdersManager.GetOrdSessionIfAvailable((long)order[SingleOrderProperties.OrderID]);
                        if (username != null)
                        {
                            Guid requesterOrderID = (Guid)order[SingleOrderProperties.RequesterOrderID];
                            List<IResponseMessage> responses = new List<IResponseMessage>();
                            responses.Add(new Fix_OrderExpiredResponse() { RequesterOrderID = requesterOrderID, Message = "Expired Order" });
                            PushResponses(username, responses.ToArray());
                        }


                        order[SingleOrderProperties.OrderStatus] = ordStatus;
                        order[SingleOrderProperties.OriginalOrderStatus] = ordStatus;
                        order[SingleOrderProperties.ExecType] = execType;
                        order[SingleOrderProperties.AvgPrice] = avgPrice;
                        order[SingleOrderProperties.CurrentPrice] = price;
                        order[SingleOrderProperties.LastExecPrice] = execPrice;
                        order[SingleOrderProperties.CurrentQuantity] = currQ;
                        order[SingleOrderProperties.ExecutedQuantity] = totalExecQ;
                        order[SingleOrderProperties.RemainingQuantity] = remQ;
                        order[SingleOrderProperties.LastExecQuantity] = thisTradeExecQ;
                        order[SingleOrderProperties.IsActive] = false;
                        order[SingleOrderProperties.IsPending] = false;
                        order[SingleOrderProperties.IsExpired] = true;
                        order[SingleOrderProperties.Note] = "Order Expired  ";
                        order[SingleOrderProperties.TimeInForce] = timeInForce;
                        order[SingleOrderProperties.ModifiedDateTime] = transactionDateTime;
                       order[SingleOrderProperties.ExpirationDate] = expirationDate;
                       order[SingleOrderProperties.ExpirationDateTime] = expirationDateTime;

                        DatabaseMethods db = new DatabaseMethods();

                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(SingleOrderProperties.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        orders_Columns.Add(SingleOrderProperties.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);

                        orders_Columns.Add(SingleOrderProperties.AvgPrice, avgPrice);
                        orders_Columns.Add(SingleOrderProperties.CurrentPrice, price);
                        orders_Columns.Add(SingleOrderProperties.LastExecPrice, execPrice);

                        orders_Columns.Add(SingleOrderProperties.CurrentQuantity, currQ);
                        orders_Columns.Add(SingleOrderProperties.LastExecQuantity, thisTradeExecQ);
                        orders_Columns.Add(SingleOrderProperties.ExecutedQuantity, totalExecQ);
                        orders_Columns.Add(SingleOrderProperties.RemainingQuantity, remQ);

                        orders_Columns.Add(SingleOrderProperties.ExecType, execType);
                        orders_Columns.Add(SingleOrderProperties.OriginalOrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.OrderStatus, ordStatus);
                        orders_Columns.Add(SingleOrderProperties.IsActive, false);
                        orders_Columns.Add(SingleOrderProperties.IsPending, false);
                        orders_Columns.Add(SingleOrderProperties.IsExpired, true);
                        orders_Columns.Add(SingleOrderProperties.Note, "Order Expired ");

                        orders_Columns.Add(SingleOrderProperties.TimeInForce, timeInForce);

                        orders_Columns.Add(SingleOrderProperties.ModifiedDateTime, transactionDateTime);
                        if (expirationDate.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDateTime, expirationDateTime); }
                        if (expirationDateTime.HasValue) { orders_Columns.Add(SingleOrderProperties.ExpirationDate, expirationDate); }

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(SingleOrderProperties.OrderID, order[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderID, order[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ClOrderID, order[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrigClOrdID, order[SingleOrderProperties.OrigClOrdID]);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionID, execID);


                        ordersDetails_Columns.Add(SingleOrdDetailsProps.AvgPrice, avgPrice);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentPrice, price);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecPrice, execPrice);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.CurrentQuantity, currQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutedQuantity, totalExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.LastExecQuantity, thisTradeExecQ);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.RemainingQuantity, remQ);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecType, execType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderStatus, ordStatus);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.Note, "Order Expired ");

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.OrderType, orderType);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.TimeInForce, timeInForce);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.IsResponse, true);

                        ordersDetails_Columns.Add(SingleOrdDetailsProps.DateTime, DateTime.Now);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionDate, transactionDateTime);
                        ordersDetails_Columns.Add(SingleOrdDetailsProps.ExecutionRecievedDateTime, DateTime.Now);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                        db = null;
                    }
                }
                catch (Exception ex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.LogErrorAsync(string.Format("Error, Execution-Expired Exec ID {0}, Error : {1}", execID, ex.ToString()));
                }
            }
        }

    }
}
