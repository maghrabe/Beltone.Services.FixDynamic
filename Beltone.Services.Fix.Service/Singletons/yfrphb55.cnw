using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Beltone.Services.Fix.Contract.Entities.RequestMessages;
using System.Data;
using Beltone.Services.Fix.Entities.Entities;
using Beltone.Services.Fix.DataLayer;
using Beltone.Services.Fix.Provider;
using Beltone.Services.Fix.Contract.Entities;
using Beltone.Services.Fix.Utilities;
using Beltone.Services.Fix.Contract.Interfaces;
using Beltone.Services.Fix.Contract.Entities.ResponseMessages;
using Beltone.Services.Fix.Entities.Constants;
using Beltone.Services.Fix.Entities.Configurations;
using Beltone.Services.Fix.Contract.Enums;
using System.Threading;
using System.Threading.Tasks;
using Beltone.Services.Fix.Service.Entities;
using Beltone.Services.Fix.MCSD;
using Beltone.Services.MCDR.Contract.Entities.ResMsgs;
using Beltone.Services.MCDR.Contract.Entities.Shared;
using Beltone.Services.MCDR.Contract.Constants;

namespace Beltone.Services.Fix.Service.Singletons
{
    public class OrdersManager
    {
        #region Variables
        //                      CallbackID, List RequesterOrderID
        private static Dictionary<string, List<Guid>> m_username_ReqOrdIDs = null;
        //                      RequesterOrderID, CallbackID
        //private static Dictionary<Guid, List<Guid>> m_ReqOrdID_subIDs = null;
        private static Dictionary<long, string> m_OrdID_username = null;
        //                      RequesterOrderID, ClOrderID
        private static Dictionary<Guid, long> m_ReqOrdID_OrdID = null;
        //                      OrderID, OrderDetails
        private static Dictionary<long, SingleOrder> m_orderID_ordersDetails = null;

        //                      OrderID, OrderDetails
       // private static Dictionary<long, SingleOrder> m_orderID_ordersDetails_MCSD = null;

        private static List<Guid> m_requestOrdersIdList = null; // maghrabi


       

        private static List<string> m_handledExecutionIDs = null;
        private static object m_syncObject = new object();

        private static string m_BrokerCode = string.Empty;

        #endregion Variables

        #region Constructors

        public static void Initialize()
        {

            m_requestOrdersIdList = new List<Guid>();
            // this line is to make sure that fix db conn is already created
            CmdOnPoolGenerator gen = new CmdOnPoolGenerator("FixOrdersDBConnectionString");
            DatabaseMethods db = new DatabaseMethods();
            m_orderID_ordersDetails = new Dictionary<long, SingleOrder>();
          
            m_ReqOrdID_OrdID = new Dictionary<Guid, long>();
            m_username_ReqOrdIDs = new Dictionary<string, List<Guid>>();
            //m_ReqOrdID_subIDs = new Dictionary<Guid, List<Guid>>();
            m_OrdID_username = new Dictionary<long, string>();
            m_handledExecutionIDs = new List<string>();

            m_BrokerCode =  SystemConfigurations.GetAppSetting("BrokerCode");
            // Fill the data 
            DataTable dtOrders = db.FillOrdersData();
            DataTable dtOrdersRequesIds = db.FillOrdersRequestIDs();
            PropertiesColumnsSchemaItem[] schema = PropColMapper.GetTableSchema(SingleOrderProperties.TableName);

            
            foreach (DataRow row in dtOrders.Rows)// maghrabi 26 jan 2016
            {
                Guid ReqOrdID = (Guid)row["RequesterOrderID"];
                m_requestOrdersIdList.Add(ReqOrdID);
            }

            foreach (DataRow row in dtOrders.Rows)
            {
                //Guid sessionKey = ((Guid)row["SessionID"]);
                string username = row["Username"].ToString();
                long ordID = (long)row["OrderID"];
                Guid ReqOrdID = (Guid)row["RequesterOrderID"];
                bool IsPendingcsd = (bool)row["IsPendingMcsd"];

                // prepare order object
                SingleOrder order = new SingleOrder();
                foreach (PropertiesColumnsSchemaItem item in schema)
                {
                    order.Data[item.ColumnName] = row[item.ColumnName];
                }

               m_orderID_ordersDetails.Add((long)row["OrderID"], order);
                
              
                m_ReqOrdID_OrdID.Add((Guid)row["RequesterOrderID"], (long)row["OrderID"]);
               
                if (!m_username_ReqOrdIDs.ContainsKey(username))
                    m_username_ReqOrdIDs.Add(username, new List<Guid>());
              
                m_username_ReqOrdIDs[username].Add(ReqOrdID);
              
                
                m_OrdID_username.Add(ordID, username);
            }


            foreach (string execID in db.GetExecutionIDs())
            {
                m_handledExecutionIDs.Add(execID);
            }
        }

        #endregion Constructors

        #region Place / Modify / Cancel Orders

        public static void HandleNewSingleOrder(string username, Guid clientKey, Guid requesterOrderID, int clientID, string custodyID, string securityID,
            string orderSide, double price, int quantity, string orderType, DateTime placementDateTime, string timeInForce,
            CurrencyItem currency, string exchangeID, DateTime orderCreatedBySysDateTime, string groupID,
            string marketID, HandleInstruction handleInst, DateTime expiryDate, Dictionary<string, object> optionalParam)
        {

            try
            {


                bool isMcsdAllocOrder = IsMCSDSellAllocationRequired(orderSide, custodyID, securityID, optionalParam);

                if (isMcsdAllocOrder)
                {
                    PlaceNewSingleOrderMCSD(username, clientKey, requesterOrderID, clientID, custodyID, securityID, orderSide, price, quantity, orderType, placementDateTime, timeInForce, currency, exchangeID
                        , orderCreatedBySysDateTime, groupID, marketID, handleInst, expiryDate, optionalParam);
                }
                else
                {
                    PlaceNewSingleOrder(username, clientKey, requesterOrderID, clientID, custodyID, securityID, orderSide, price, quantity, orderType, placementDateTime, timeInForce, currency, exchangeID
                       , orderCreatedBySysDateTime, groupID, marketID, handleInst, expiryDate, optionalParam);
                }
            }
            catch(Exception exp)
            {
                Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRefusedByService() { ClientKey = clientKey, RefuseMessage = exp.Message, RequesterOrderID = requesterOrderID } });
            }
        }

        private static void PlaceNewSingleOrder(string username, Guid clientKey, Guid requesterOrderID, int clientID, string custodyID, string securityID,
          string orderSide, double price, int quantity, string orderType, DateTime placementDateTime, string timeInForce,
          CurrencyItem currency, string exchangeID, DateTime orderCreatedBySysDateTime, string groupID,
          string marketID, HandleInstruction handleInst, DateTime expiryDate, Dictionary<string, object> optionalParam)
        {
            long orderID = -1;

          
            try
            {
               
                // Get Currency 
                LookupItem currencyLookup = Lookups.GetCurrencyLookupByCurrencyCode(currency.Code);
                // Get Destination Type
                LookupItem exchangeLookup = Lookups.GetExchangeDestinationByExchangeID(exchangeID);
                // order Type
                LookupItem orderTypeLookup = Lookups.GetOrderTypeLookupByCodeValue(orderType);
                // Order Side
                LookupItem orderSideLookup = Lookups.GetOrderSidesLookupByCodeValue(orderSide);
                // Time In Force
                LookupItem timeInForceLookup = Lookups.GetTimeInForceLookupByCode(timeInForce);
                // Handle Instruction
                string handleValue = Enum.GetName(typeof(HandleInstruction), handleInst);
                LookupItem handleInstLookup = Lookups.GetHandleInstTypeLookupByCodeValue(handleValue);
                bool hasAON = false;
                int minQ = 0;
                if (optionalParam != null)
                    if (optionalParam.ContainsKey("AON") && (bool)optionalParam["AON"])
                        hasAON = true;
                if (hasAON)// MinQty must be existed if AON = true as it's already been validated before
                    minQ = (int)optionalParam["MinQty"];
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    string OrderStatus = string.Empty;
                    string OriginalOrderStatus = string.Empty;
                    string ExecType = string.Empty;
                    string Note = string.Empty;
                    bool IsPendingMcsd = false;

                   
                        OrderStatus = "PendingNew";
                        OriginalOrderStatus = "PendingNew";
                        ExecType = "PendingNew";
                        Note = "awaiting for acceptance response";
                        IsPendingMcsd = false;
                   

                    DatabaseMethods db = new DatabaseMethods();
                    //orderID = db.AddNewSingleOrder(clientKey, requesterOrderID, null, null, clientID, custodyID, securityID, orderSide, 
                    //price, price, price, quantity, orderType, placementDateTime, "PendingNew", "PendingNew", "", false, "", timeInForce);


                    Dictionary<string, object> data = new Dictionary<string, object>();
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CurrencyID).ColumnName, currency.ID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.GroupID).ColumnName, groupID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.MarketID).ColumnName, marketID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExchangeID).ColumnName, exchangeID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.RequesterOrderID).ColumnName, requesterOrderID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ClientID).ColumnName, clientID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CustodyID).ColumnName, custodyID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.SecurityCode).ColumnName, securityID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderSide).ColumnName, orderSide);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CurrentPrice).ColumnName, price);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalPrice).ColumnName, price);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.PlacementDateTime).ColumnName, placementDateTime);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalQuantity).ColumnName, quantity);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.RemainingQuantity).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecutedQuantity).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.LastExecQuantity).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.LastExecPrice).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.AvgPrice).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CurrentQuantity).ColumnName, quantity);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderType).ColumnName, orderType);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderType).ColumnName, orderType);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderStatus).ColumnName, OrderStatus);

                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderStatus).ColumnName, OriginalOrderStatus);

                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecType).ColumnName, ExecType);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderCreatedBySysDateTime).ColumnName, orderCreatedBySysDateTime);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderRecievedDateTime).ColumnName, DateTime.Now);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, DateTime.Now);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, Note);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPending).ColumnName, true);
                    // data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMCDR).ColumnName, true);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsActive).ColumnName, false);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsExecuted).ColumnName, false);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsCompleted).ColumnName, false);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.HasSystemError).ColumnName, false);
                    //data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ErrorMessage).ColumnName, string.Empty);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalTimeInForce).ColumnName, timeInForce);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.TimeInForce).ColumnName, timeInForce);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalHandleInst).ColumnName, handleValue);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.HandleInst).ColumnName, handleValue);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExpirationDate).ColumnName, expiryDate.ToShortDateString());
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExpirationDateTime).ColumnName, expiryDate);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.AON).ColumnName, hasAON);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalAON).ColumnName, hasAON);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalMinQty).ColumnName, minQ);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.MinQty).ColumnName, minQ);

                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, IsPendingMcsd);// maghrabi

                    //OrderDetails Table
                    Dictionary<string, object> dataDetails = new Dictionary<string, object>();
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, price);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, quantity);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, quantity);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, orderType);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, OrderStatus);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, ExecType);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, Note);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.HasSystemError).ColumnName, false);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ErrorMessage).ColumnName, string.Empty);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, timeInForce);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsNewOrderRequest).ColumnName, true);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, true);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.HandleInst).ColumnName, handleValue);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, hasAON);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.MinQty).ColumnName, minQ);



                    orderID = db.AddNewSingleOrder(clientKey, username, data, dataDetails);

                    string clOrderID = string.Format("{0}-{1}", orderID.ToString(), "1");

                    SingleOrder order = new SingleOrder();

                    order.Data[SingleOrderProperties.OrderID] = orderID;
                    order.Data[SingleOrderProperties.ClOrderID] = clOrderID;
                    order.Data[SingleOrderProperties.GroupID] = groupID;
                    order.Data[SingleOrderProperties.MarketID] = marketID;
                    order.Data[SingleOrderProperties.ExchangeID] = exchangeID;
                    order.Data[SingleOrderProperties.CurrencyID] = currency.ID;
                    order.Data[SingleOrderProperties.RequesterOrderID] = requesterOrderID;
                    order.Data[SingleOrderProperties.ClientID] = clientID;
                    order.Data[SingleOrderProperties.CustodyID] = custodyID;
                    order.Data[SingleOrderProperties.SecurityCode] = securityID;
                    order.Data[SingleOrderProperties.OrderSide] = orderSide;

                    order.Data[SingleOrderProperties.IsActive] = false;
                    order.Data[SingleOrderProperties.IsPending] = true;
                    order.Data[SingleOrderProperties.IsCompleted] = false;
                    order.Data[SingleOrderProperties.IsExecuted] = false;

                    order.Data[SingleOrderProperties.CurrentPrice] = price;
                    order.Data[SingleOrderProperties.OriginalPrice] = price;
                    order.Data[SingleOrderProperties.AvgPrice] = 0;
                    order.Data[SingleOrderProperties.LastExecPrice] = 0;

                    order.Data[SingleOrderProperties.OriginalQuantity] = quantity;
                    order.Data[SingleOrderProperties.RemainingQuantity] = 0;
                    order.Data[SingleOrderProperties.ExecutedQuantity] = 0;
                    order.Data[SingleOrderProperties.LastExecQuantity] = 0;
                    order.Data[SingleOrderProperties.CurrentQuantity] = quantity;

                    order.Data[SingleOrderProperties.OriginalOrderType] = orderType;
                    order.Data[SingleOrderProperties.OrderType] = orderType;
                    order.Data[SingleOrderProperties.OrderStatus] = OrderStatus;
                    order.Data[SingleOrderProperties.OriginalOrderStatus] = OriginalOrderStatus;
                    order.Data[SingleOrderProperties.ExecType] = ExecType;
                    order.Data[SingleOrderProperties.OriginalTimeInForce] = timeInForce;
                    order.Data[SingleOrderProperties.TimeInForce] = timeInForce;
                    order.Data[SingleOrderProperties.OriginalHandleInst] = handleValue;
                    order.Data[SingleOrderProperties.HandleInst] = handleValue;
                    order.Data[SingleOrderProperties.AON] = hasAON;
                    order.Data[SingleOrderProperties.MinQty] = minQ;
                    order.Data[SingleOrderProperties.OriginalAON] = hasAON;
                    order.Data[SingleOrderProperties.OriginalMinQty] = minQ;

                    order.Data[SingleOrderProperties.PlacementDateTime] = placementDateTime;
                    order.Data[SingleOrderProperties.OrderCreatedBySysDateTime] = orderCreatedBySysDateTime;
                    order.Data[SingleOrderProperties.OrderRecievedDateTime] = DateTime.Now;
                    order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;
                    order.Data[SingleOrderProperties.Note] = Note;

                    order.Data[SingleOrderProperties.HasSystemError] = false;

                    order.Data[SingleOrderProperties.ExpirationDate] = expiryDate;  //maghrabi 11 Jan
                    order.Data[SingleOrderProperties.IsPendingMcsd] = false;


                   
                    // lock only shared entities as each method create its only copy of variable except shared entities
                    lock (m_syncObject)
                    {
                        if (!m_username_ReqOrdIDs.ContainsKey(username))
                        {
                            m_username_ReqOrdIDs.Add(username, new List<Guid>());
                        }


                        if (m_username_ReqOrdIDs[username].Contains(requesterOrderID) == false)
                            m_username_ReqOrdIDs[username].Add(requesterOrderID);


                        if (m_ReqOrdID_OrdID.ContainsKey(requesterOrderID) == false)
                            m_ReqOrdID_OrdID.Add(requesterOrderID, orderID);


                        if (m_orderID_ordersDetails.ContainsKey(orderID) == false)
                            m_orderID_ordersDetails.Add(orderID, order);


                        if (m_OrdID_username.ContainsKey(orderID) == false)
                            m_OrdID_username.Add(orderID, username);

                        m_requestOrdersIdList.Add(requesterOrderID); // maghrabi 26 jan 2016

                    }

                 
                        FixGatewayManager.PlaceNewSingleOrder(clOrderID, clientID.ToString(), securityID, quantity, price, custodyID, orderSideLookup.FixValue.ToCharArray()[0], orderTypeLookup.FixValue.ToCharArray()[0], currencyLookup.FixValue, exchangeLookup.FixValue, timeInForceLookup.FixValue.ToCharArray()[0], groupID, handleInstLookup.FixValue.ToCharArray()[0], expiryDate, hasAON, minQ);
                    

                    ts.Complete();
                    db = null;
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                if (orderID > -1)
                { RemoveOrderRef(orderID, requesterOrderID); }

                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRefusedByService() { ClientKey = clientKey, RefuseMessage = "System Erorr", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inEx)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order to the client while placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, inEx.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }
        }

        private static void PlaceNewSingleOrderMCSD(string username, Guid clientKey, Guid requesterOrderID, int clientID, string custodyID, string securityID,
          string orderSide, double price, int quantity, string orderType, DateTime placementDateTime, string timeInForce,
          CurrencyItem currency, string exchangeID, DateTime orderCreatedBySysDateTime, string groupID,
          string marketID, HandleInstruction handleInst, DateTime expiryDate, Dictionary<string, object> optionalParam)
        {
            long orderID = -1;
            try
            {
                // Get Currency 
                LookupItem currencyLookup = Lookups.GetCurrencyLookupByCurrencyCode(currency.Code);
                // Get Destination Type
                LookupItem exchangeLookup = Lookups.GetExchangeDestinationByExchangeID(exchangeID);
                // order Type
                LookupItem orderTypeLookup = Lookups.GetOrderTypeLookupByCodeValue(orderType);
                // Order Side
                LookupItem orderSideLookup = Lookups.GetOrderSidesLookupByCodeValue(orderSide);
                // Time In Force
                LookupItem timeInForceLookup = Lookups.GetTimeInForceLookupByCode(timeInForce);
                // Handle Instruction
                string handleValue = Enum.GetName(typeof(HandleInstruction), handleInst);
                LookupItem handleInstLookup = Lookups.GetHandleInstTypeLookupByCodeValue(handleValue);
                bool hasAON = false;
                int minQ = 0;
                if (optionalParam != null)
                    if (optionalParam.ContainsKey("AON") && (bool)optionalParam["AON"])
                        hasAON = true;
                if (hasAON)// MinQty must be existed if AON = true as it's already been validated before
                    minQ = (int)optionalParam["MinQty"];
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    string OrderStatus = string.Empty;
                    string OriginalOrderStatus = string.Empty;
                    string ExecType = string.Empty;
                    string Note = string.Empty;
                    bool IsPendingMcsd = false;


                    OrderStatus = "PendingNewMCSD";
                    OriginalOrderStatus = "PendingNewMCSD";
                    ExecType = "PendingNewMCSD";
                    Note = "awaiting for MCSD acceptance response";
                    IsPendingMcsd = true;


                    DatabaseMethods db = new DatabaseMethods();

                    Dictionary<string, object> data = new Dictionary<string, object>();
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CurrencyID).ColumnName, currency.ID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.GroupID).ColumnName, groupID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.MarketID).ColumnName, marketID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExchangeID).ColumnName, exchangeID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.RequesterOrderID).ColumnName, requesterOrderID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ClientID).ColumnName, clientID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CustodyID).ColumnName, custodyID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.SecurityCode).ColumnName, securityID);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderSide).ColumnName, orderSide);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CurrentPrice).ColumnName, price);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalPrice).ColumnName, price);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.PlacementDateTime).ColumnName, placementDateTime);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalQuantity).ColumnName, quantity);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.RemainingQuantity).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecutedQuantity).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.LastExecQuantity).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.LastExecPrice).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.AvgPrice).ColumnName, 0);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.CurrentQuantity).ColumnName, quantity);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderType).ColumnName, orderType);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderType).ColumnName, orderType);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderStatus).ColumnName, OrderStatus);

                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderStatus).ColumnName, OriginalOrderStatus);

                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecType).ColumnName, ExecType);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderCreatedBySysDateTime).ColumnName, orderCreatedBySysDateTime);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderRecievedDateTime).ColumnName, DateTime.Now);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, DateTime.Now);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, Note);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPending).ColumnName, true);
                    // data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMCDR).ColumnName, true);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsActive).ColumnName, false);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsExecuted).ColumnName, false);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsCompleted).ColumnName, false);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.HasSystemError).ColumnName, false);
                    //data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ErrorMessage).ColumnName, string.Empty);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalTimeInForce).ColumnName, timeInForce);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.TimeInForce).ColumnName, timeInForce);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalHandleInst).ColumnName, handleValue);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.HandleInst).ColumnName, handleValue);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExpirationDate).ColumnName, expiryDate.ToShortDateString());
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExpirationDateTime).ColumnName, expiryDate);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.AON).ColumnName, hasAON);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalAON).ColumnName, hasAON);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalMinQty).ColumnName, minQ);
                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.MinQty).ColumnName, minQ);

                    data.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, IsPendingMcsd);// maghrabi

                    //OrderDetails Table
                    Dictionary<string, object> dataDetails = new Dictionary<string, object>();
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, price);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, quantity);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, quantity);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, 0);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, orderType);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, OrderStatus);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, ExecType);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, Note);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.HasSystemError).ColumnName, false);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ErrorMessage).ColumnName, string.Empty);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, timeInForce);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsNewOrderRequest).ColumnName, true);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, true);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.HandleInst).ColumnName, handleValue);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, hasAON);
                    dataDetails.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.MinQty).ColumnName, minQ);



                    orderID = db.AddNewSingleOrder(clientKey, username, data, dataDetails);

                    string clOrderID = string.Format("{0}-{1}", orderID.ToString(), "1");

                    SingleOrder order = new SingleOrder();

                    order.Data[SingleOrderProperties.OrderID] = orderID;
                    order.Data[SingleOrderProperties.ClOrderID] = clOrderID;
                    order.Data[SingleOrderProperties.GroupID] = groupID;
                    order.Data[SingleOrderProperties.MarketID] = marketID;
                    order.Data[SingleOrderProperties.ExchangeID] = exchangeID;
                    order.Data[SingleOrderProperties.CurrencyID] = currency.ID;
                    order.Data[SingleOrderProperties.RequesterOrderID] = requesterOrderID;
                    order.Data[SingleOrderProperties.ClientID] = clientID;
                    order.Data[SingleOrderProperties.CustodyID] = custodyID;
                    order.Data[SingleOrderProperties.SecurityCode] = securityID;
                    order.Data[SingleOrderProperties.OrderSide] = orderSide;

                    order.Data[SingleOrderProperties.IsActive] = false;
                    order.Data[SingleOrderProperties.IsPending] = true;
                    order.Data[SingleOrderProperties.IsCompleted] = false;
                    order.Data[SingleOrderProperties.IsExecuted] = false;

                    order.Data[SingleOrderProperties.CurrentPrice] = price;
                    order.Data[SingleOrderProperties.OriginalPrice] = price;
                    order.Data[SingleOrderProperties.AvgPrice] = 0;
                    order.Data[SingleOrderProperties.LastExecPrice] = 0;

                    order.Data[SingleOrderProperties.OriginalQuantity] = quantity;
                    order.Data[SingleOrderProperties.RemainingQuantity] = 0;
                    order.Data[SingleOrderProperties.ExecutedQuantity] = 0;
                    order.Data[SingleOrderProperties.LastExecQuantity] = 0;
                    order.Data[SingleOrderProperties.CurrentQuantity] = quantity;

                    order.Data[SingleOrderProperties.OriginalOrderType] = orderType;
                    order.Data[SingleOrderProperties.OrderType] = orderType;
                    order.Data[SingleOrderProperties.OrderStatus] = OrderStatus;
                    order.Data[SingleOrderProperties.OriginalOrderStatus] = OriginalOrderStatus;
                    order.Data[SingleOrderProperties.ExecType] = ExecType;
                    order.Data[SingleOrderProperties.OriginalTimeInForce] = timeInForce;
                    order.Data[SingleOrderProperties.TimeInForce] = timeInForce;
                    order.Data[SingleOrderProperties.OriginalHandleInst] = handleValue;
                    order.Data[SingleOrderProperties.HandleInst] = handleValue;
                    order.Data[SingleOrderProperties.AON] = hasAON;
                    order.Data[SingleOrderProperties.MinQty] = minQ;
                    order.Data[SingleOrderProperties.OriginalAON] = hasAON;
                    order.Data[SingleOrderProperties.OriginalMinQty] = minQ;

                    order.Data[SingleOrderProperties.PlacementDateTime] = placementDateTime;
                    order.Data[SingleOrderProperties.OrderCreatedBySysDateTime] = orderCreatedBySysDateTime;
                    order.Data[SingleOrderProperties.OrderRecievedDateTime] = DateTime.Now;
                    order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;
                    order.Data[SingleOrderProperties.Note] = Note;

                    order.Data[SingleOrderProperties.HasSystemError] = false;

                    order.Data[SingleOrderProperties.ExpirationDate] = expiryDate;  //maghrabi 11 Jan
                    order.Data[SingleOrderProperties.IsPendingMcsd] = true;


                    // lock only shared entities as each method create its only copy of variable except shared entities
                    lock (m_syncObject)
                    {
                        if (!m_username_ReqOrdIDs.ContainsKey(username))
                        {
                            m_username_ReqOrdIDs.Add(username, new List<Guid>());
                        }


                        if (m_username_ReqOrdIDs[username].Contains(requesterOrderID) == false)
                        m_username_ReqOrdIDs[username].Add(requesterOrderID);


                        if (m_ReqOrdID_OrdID.ContainsKey(requesterOrderID) == false)
                        m_ReqOrdID_OrdID.Add(requesterOrderID, orderID);


                        if (m_orderID_ordersDetails.ContainsKey(orderID) == false)
                        m_orderID_ordersDetails.Add(orderID, order);


                        if (m_OrdID_username.ContainsKey(orderID) == false)
                        m_OrdID_username.Add(orderID, username);

                        m_requestOrdersIdList.Add(requesterOrderID); // maghrabi 26 jan 2016

                    }


                    // Alocate Quantity of sell order.
                    string unifiedCode = optionalParam["UnifiedCode"].ToString();
                    string allocationType = optionalParam["ALLOC_TYPE"].ToString();
                    McsdGatwayManager.PlaceMcsdNewOrderAllocation(quantity, exchangeLookup.FixValue, custodyID, m_BrokerCode, unifiedCode, securityID, requesterOrderID,allocationType,expiryDate);


                    ts.Complete();
                    db = null;
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error MCSD allocating order  , ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                if (orderID > -1)
                { RemoveOrderRef(orderID, requesterOrderID); }

                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRefusedByService() { ClientKey = clientKey, RefuseMessage = "System Erorr", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inEx)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order to the client while placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, inEx.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }
        }


        /// <summary>
        /// Sell order accepted from MCSD service
        /// </summary>
        /// <param name="mcsdResponseMsg"></param>

        internal static void NewOrderAllocationAccepted(AllocRes mcsdResponseMsg)
        {
            long orderID = -1;
            string username = string.Empty; ;
            SingleOrder order = null;
            Guid requesterOrderID = new Guid();
            try
            {

                requesterOrderID = mcsdResponseMsg.ReqID;

                orderID = m_ReqOrdID_OrdID[requesterOrderID];

                username = m_OrdID_username[orderID];

                order = m_orderID_ordersDetails[orderID];  // get order from MCSD pending orders list

                #region Get Lookups required parameters
                string securityID = order.Data[SingleOrderProperties.SecurityCode].ToString();
                Stock stock = StocksDefinitions.GetStockByCode(securityID);
                CurrencyItem currency = Currencies.GetCurrencyByCode(stock.CurrencyCode);

                // Get ExchangeID
                string exchangeID = order.Data[SingleOrderProperties.ExchangeID].ToString();
                string orderType = order.Data[SingleOrderProperties.OrderType].ToString();
                string orderSide = order.Data[SingleOrderProperties.OrderSide].ToString();
                string timeInForce = order.Data[SingleOrderProperties.TimeInForce].ToString();
                string handleValue = order.Data[SingleOrderProperties.HandleInst].ToString();
                #endregion

                // Get Currency 
                LookupItem currencyLookup = Lookups.GetCurrencyLookupByCurrencyCode(currency.Code);
                // Get Destination Type
                LookupItem exchangeLookup = Lookups.GetExchangeDestinationByExchangeID(exchangeID);
                // order Type
                LookupItem orderTypeLookup = Lookups.GetOrderTypeLookupByCodeValue(orderType);
                // Order Side
                LookupItem orderSideLookup = Lookups.GetOrderSidesLookupByCodeValue(orderSide);
                // Time In Force
                LookupItem timeInForceLookup = Lookups.GetTimeInForceLookupByCode(timeInForce);
                // Handle Instruction
                LookupItem handleInstLookup = Lookups.GetHandleInstTypeLookupByCodeValue(handleValue);

                string OrderStatus = "PendingNew";
              //  string OriginalOrderStatus = "PendingNew";
                string ExecType = "PendingNew";
                string Note = "Sell order allocation accepted from MCSD";
                bool IsPendingMcsd = false;

                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    DatabaseMethods db = new DatabaseMethods();

                    order.Data[SingleOrderProperties.OrderStatus] = OrderStatus;
                 //   order.Data[SingleOrderProperties.OriginalOrderStatus] = OriginalOrderStatus;
                    order.Data[SingleOrderProperties.ExecType] = ExecType;
                    order.Data[SingleOrderProperties.Note] = Note;
                    order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;

                    Dictionary<string, object> orders_Columns = new Dictionary<string, object>();


                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderStatus).ColumnName, OrderStatus);
                  //  orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderStatus).ColumnName, OriginalOrderStatus);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecType).ColumnName, ExecType);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, Note);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, IsPendingMcsd);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

                    Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                    orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                    Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);//order.Data[SingleOrderProperties.CurrentPrice]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);//order.Data[SingleOrderProperties.CurrentQuantity]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, order.Data[SingleOrderProperties.AON]); //order.Data[SingleOrderProperties.AON]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedMinQty).ColumnName, order.Data[SingleOrderProperties.MinQty]); // order.Data[SingleOrderProperties.MinQty]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, ExecType);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, OrderStatus);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, Note);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsModifyRequest).ColumnName, false);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, false);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedOrderType).ColumnName, orderType);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedTimeInForce).ColumnName, timeInForce);

                    db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);
                                   

                    ////clOrderID
                    //string clOrderID = string.Format("{0}-{1}", orderID.ToString(), "1");
                    string clOrderID = order.Data[SingleOrderProperties.ClOrderID].ToString();
                    FixGatewayManager.PlaceNewSingleOrder(clOrderID, order.Data[SingleOrderProperties.ClientID].ToString(), securityID, (int)order.Data[SingleOrderProperties.CurrentQuantity], (double)order.Data[SingleOrderProperties.CurrentPrice], order.Data[SingleOrderProperties.CustodyID].ToString(), orderSideLookup.FixValue.ToCharArray()[0], orderTypeLookup.FixValue.ToCharArray()[0], currencyLookup.FixValue, exchangeLookup.FixValue, timeInForceLookup.FixValue.ToCharArray()[0], order.Data[SingleOrderProperties.GroupID].ToString(), handleInstLookup.FixValue.ToCharArray()[0], (DateTime)order.Data[SingleOrderProperties.ExpirationDate], (bool)order.Data[SingleOrderProperties.AON], (int)order.Data[SingleOrderProperties.MinQty]);
                    ts.Complete();
                }
            }
            catch (Exception ex)
            {
              
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                Guid clientKey = Sessions.GetSessionKey(username);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                if (orderID > -1)
                { RemoveOrderRef(orderID, requesterOrderID); }

                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRefusedByService() { ClientKey = clientKey, RefuseMessage = "System Erorr", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inEx)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order to the client while placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, inEx.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="orderSide"></param>
        /// <param name="custodyID"></param>
        /// <param name="securityID"></param>
        /// <returns></returns>
        private static bool IsMCSDSellAllocationRequired(string orderSide, string custodyID, string securityID,Dictionary<string,object> optionaParam)
        {
         
           bool result = false;

            if (orderSide != "Sell")
                return false;
            try
            {
                if (orderSide == "Sell")
                {
                    if (optionaParam.ContainsKey("ALLOC_TYPE"))
                    {

                        object value = optionaParam["ALLOC_TYPE"];
                        if (value.ToString() == ALLOC_TYPE.NONE)
                            return false;
                        else
                            return true;
                    }
                    else
                    {
                        return false;
                    }
                    
                }
            }
            catch (Exception exp)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error couldn't set if Order need MCSD allocation or not. Error Deatails : {0}", exp.ToString()), ConsoleColor.Red, ConsoleColor.White, false);
                throw new Exception("Failed to detect if order require MCSD alloation.");
            }
            return result;
        }

        internal static void ModifyOrder(string username, Guid clientKey, Guid requesterOrderID, long orderID, int quantity, double price, string orderType, string timeInForce, Dictionary<string,object> optionalParam)
        {
            try
            {
                SingleOrder order = m_orderID_ordersDetails[orderID];

                if (order.Data[SingleOrderProperties.OrderSide].ToString() == "Buy")
                {
                    ModifyOrderFIXGatway(username, clientKey, requesterOrderID, orderID, quantity, price, orderType, timeInForce, optionalParam);
                }
                else // Sell Order
                {
                    bool isMcsdAllocRequired = false;
                    int allocDirection = 0;
                // isMcsdAllocRequired =  IsMCSDSellAllocationRequired(quantity, order, out allocDirection);
                    isMcsdAllocRequired = IsMCSDSellAllocationRequired(quantity, order);
                    // check order quantity.
                    // check short sell.

                    if (isMcsdAllocRequired)
                    {
                        ModifyOrderMCSD(username, clientKey, requesterOrderID, orderID, quantity, price, orderType, timeInForce, optionalParam,allocDirection);
                    }

                    else // sell order doesn't need allocation from MCSD
                    {
                        ModifyOrderFIXGatway(username, clientKey, requesterOrderID, orderID, quantity, price, orderType, timeInForce, optionalParam);
                    }
                }
            }
            catch (Exception exp)
            {

            }
        }

        internal static void ModifyOrderMCSD(string username, Guid clientKey, Guid requesterOrderID, long orderID, int quantity, double price, string orderType, string timeInForce, Dictionary<string, object> optionalParam,int allocationDirection)
        {
            try
            {
                SingleOrder order = m_orderID_ordersDetails[orderID];
                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    DatabaseMethods db = new DatabaseMethods();
                    /////db.UpdateOrderDetails(order.OrderID, newClOrdID, order.OrigClOrdID, quantity, quantity - order.ExecutedQuantity, order.ExecutedQuantity, order.CurrentPrice, order.CurrentPrice, order.CurrentPrice, order.OrderType, order.OrderStatus, order.ExecType, DateTime.Now, "Modify Order Request", false, "", timeInForce == string.Empty ? order.TimeInForce : timeInForce, null);
                    // order.Data[SingleOrderProperties.ClOrderID] = newClOrdID;
                    order.Data[SingleOrderProperties.IsPending] = true;
                    order.Data[SingleOrderProperties.Note] = "Pending MCSD Modify Request";
                    order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;
                    order.Data[SingleOrderProperties.IsPendingMcsd] = true;
                    order.Data[SingleOrderProperties.RequestedQuantity] = quantity;
                    order.Data[SingleOrderProperties.RequestedPrice] = price;
                    order.Data[SingleOrderProperties.RequestedOrderType] = orderType;
                    order.Data[SingleOrderProperties.RequestedTimeInForce] = timeInForce;
                    order.Data[SingleOrderProperties.OrderStatus] = "PendingEditMcsd";
                    order.OptionalParams = optionalParam;

                    Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPending).ColumnName, true);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, true);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

                    Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                    orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                    Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                    //ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
                    // ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedPrice).ColumnName, price);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedQuantity).ColumnName, quantity);

                    //ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, hasAON);
                    // ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedMinQty).ColumnName, minQ);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, order.Data[SingleOrderProperties.ExecType]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, order.Data[SingleOrderProperties.OrderStatus]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsModifyRequest).ColumnName, true);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, true);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedOrderType).ColumnName, orderType);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedTimeInForce).ColumnName, timeInForce);

                    db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);
                    McsdGatwayManager.PlaceMcsdModifyOrderAllocation(quantity, requesterOrderID);
                    ts.Complete();
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error modify order, ClientKey {0}, Error: {1}", clientKey, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderReplaceRefusedByService() { ClientKey = clientKey, RefuseReason = "System Error", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order modification to the client, ClientKey {0}, Error: {1}", clientKey, inex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }

        }
      
        internal static void ModifyOrderFIXGatway(string username, Guid clientKey, Guid requesterOrderID, long orderID, int quantity, double price, string orderType, string timeInForce, Dictionary<string, object> optionalParam)
        {
            try
            {
                SingleOrder order = m_orderID_ordersDetails[orderID];
                string[] arr = order.Data[SingleOrderProperties.ClOrderID].ToString().Split(new char[] { '-' });
                string ordID = arr[0];
                int changeID = int.Parse(arr[1]);
                changeID++;

                //string newOrigClOrdID = order.ClOrderID;
                string newClOrdID = string.Format("{0}-{1}", ordID, changeID);

                bool hasAON = false;
                int minQ = 0;
                if (optionalParam != null)
                    if (optionalParam.ContainsKey("AON") && (bool)optionalParam["AON"])
                        hasAON = true;
                if (hasAON)
                    minQ = (int)optionalParam["MinQty"];


                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    DatabaseMethods db = new DatabaseMethods();
                    /////db.UpdateOrderDetails(order.OrderID, newClOrdID, order.OrigClOrdID, quantity, quantity - order.ExecutedQuantity, order.ExecutedQuantity, order.CurrentPrice, order.CurrentPrice, order.CurrentPrice, order.OrderType, order.OrderStatus, order.ExecType, DateTime.Now, "Modify Order Request", false, "", timeInForce == string.Empty ? order.TimeInForce : timeInForce, null);


                    order.Data[SingleOrderProperties.ClOrderID] = newClOrdID;
                    order.Data[SingleOrderProperties.IsPending] = true;
                    order.Data[SingleOrderProperties.Note] = "Pending Modify Request";
                    order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;

                   


                    Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPending).ColumnName, true);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

                    Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                    orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                    Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedPrice).ColumnName, price);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedQuantity).ColumnName, quantity);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, hasAON);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedMinQty).ColumnName, minQ);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, order.Data[SingleOrderProperties.ExecType]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, order.Data[SingleOrderProperties.OrderStatus]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsModifyRequest).ColumnName, true);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, true);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);

                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedOrderType).ColumnName, orderType);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedTimeInForce).ColumnName, timeInForce);

                    db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                    FixGatewayManager.ModifyCancelOrder(order.Data[SingleOrderProperties.ClientID].ToString(), order.Data[SingleOrderProperties.SecurityCode].ToString(), string.Format("{0}-{1}", ordID, changeID), order.Data[SingleOrderProperties.OrigClOrdID].ToString(), quantity, price, Lookups.GetTimeInForceLookupByCodeValue(timeInForce).FixValue.ToCharArray()[0], Lookups.GetOrderTypeLookupByCodeValue(orderType).FixValue.ToCharArray()[0], Lookups.GetOrderSidesLookupByCodeValue(order.Data[SingleOrderProperties.OrderSide].ToString()).FixValue.ToCharArray()[0], hasAON, minQ);
                    ts.Complete();
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error modify order, ClientKey {0}, Error: {1}", clientKey, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderReplaceRefusedByService() { ClientKey = clientKey, RefuseReason = "System Error", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order modification to the client, ClientKey {0}, Error: {1}", clientKey, inex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }

        }

        internal static void CancelOrder(string username, Guid clientKey, Guid requesterOrderID, long orderID)
        {
            try
            {

                SingleOrder order = m_orderID_ordersDetails[orderID];

                if (order.Data[SingleOrderProperties.OrderSide] == "Buy")
                {
                    CancelOrderFixGatway(username, clientKey, requesterOrderID, orderID);
                }
                else // Sell Order
                {
                    bool isMcsdAllocRequired = false;
                    int allocDirection = 0;
                    IsMCSDSellAllocationRequired(0, order, out allocDirection);
                    // check order quantity.
                    // check short sell.

                    if (isMcsdAllocRequired)
                    {
                        CancelOrderMCSD(username, clientKey, requesterOrderID,orderID);
                    }

                    else // sell order doesn't need allocation from MCSD
                    {
                        CancelOrderFixGatway(username, clientKey, requesterOrderID, orderID);
                    }
                }

            }
            catch(Exception ex)
            {
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error CancelOrder , ClientKey {0}, Error: {1}", clientKey, ex.Message), ConsoleColor.Red, ConsoleColor.White, true);
            }
        }

        internal static void CancelOrderFixGatway(string username, Guid clientKey, Guid requesterOrderID, long orderID)
        {
            try
            {
                // Order Side

                SingleOrder order = m_orderID_ordersDetails[orderID];
                LookupItem orderSideLookup = Lookups.GetOrderSidesLookupByCodeValue(order.Data[SingleOrderProperties.OrderSide].ToString());
                lock (order)
                {
                    string[] arr = order.Data[SingleOrderProperties.ClOrderID].ToString().Split(new char[] { '-' });
                    string ordID = arr[0];
                    int changeID = int.Parse(arr[1]);
                    changeID++;

                    //string newOrigClOrdID = order.ClOrderID;
                    string newClOrdID = string.Format("{0}-{1}", ordID, changeID);


                    using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                    {
                        DatabaseMethods db = new DatabaseMethods();
                        //db.UpdateOrderDetails(order.OrderID, newClOrdID, order.OrigClOrdID, order.CurrentQuantity, order.RemainingQuantity, order.ExecutedQuantity, order.CurrentPrice, order.CurrentPrice, order.CurrentPrice, order.OrderType, order.OrderStatus, order.ExecType, DateTime.Now, "Cancel Order Request", false, "", order.TimeInForce, null);


                        order.Data[SingleOrderProperties.ClOrderID] = newClOrdID;
                        order.Data[SingleOrderProperties.IsPending] = true;
                        order.Data[SingleOrderProperties.Note] = "Pending Cancel Request";
                        order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;


                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPending).ColumnName, true);

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);


                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, order.Data[SingleOrderProperties.ExecType]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, order.Data[SingleOrderProperties.OrderStatus]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsCancelRequest).ColumnName, true);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, true);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);




                        FixGatewayManager.CancelOrder(order.Data[SingleOrderProperties.ClientID].ToString(), order.Data[SingleOrderProperties.SecurityCode].ToString(), string.Format("{0}-{1}", ordID, changeID), order.Data[SingleOrderProperties.OrigClOrdID].ToString(), orderSideLookup.FixValue.ToCharArray()[0]);

                        ts.Complete();
                    }
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error modify order, ClientKey {0}, Error: {1}", clientKey, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderReplaceRefusedByService() { ClientKey = clientKey, RefuseReason = "System Error", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order modification to the client, ClientKey {0}, Error: {1}", clientKey, inex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }

        }
       
        internal static void CancelOrderMCSD(string username, Guid clientKey, Guid requesterOrderID, long orderID)
        {
            try
            {
                // Order Side

                SingleOrder order = m_orderID_ordersDetails[orderID];
                
                order.Data[SingleOrderProperties.OrderStatus] = "PendingCancelMCSD";
                lock (order)
                {
                    

                    using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                    {
                        DatabaseMethods db = new DatabaseMethods();
                        //db.UpdateOrderDetails(order.OrderID, newClOrdID, order.OrigClOrdID, order.CurrentQuantity, order.RemainingQuantity, order.ExecutedQuantity, order.CurrentPrice, order.CurrentPrice, order.CurrentPrice, order.OrderType, order.OrderStatus, order.ExecType, DateTime.Now, "Cancel Order Request", false, "", order.TimeInForce, null);


                      
                        order.Data[SingleOrderProperties.IsPending] = true;
                        order.Data[SingleOrderProperties.IsPendingMcsd] = true;
                        order.Data[SingleOrderProperties.Note] = "Pending MCSD Cancel Request";
                        order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;


                        Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

        

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPending).ColumnName, true);
                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, true);

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                        orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

                        Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                        orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                        Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);
                      //  ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);


                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, order.Data[SingleOrderProperties.ExecType]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, order.Data[SingleOrderProperties.OrderStatus]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, order.Data[SingleOrderProperties.Note]);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsCancelRequest).ColumnName, true);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, true);

                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
                        ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);


                        db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);




                        McsdGatwayManager.PlaceMcsdModifyOrderAllocation(0, requesterOrderID);

                        ts.Complete();
                    }
                }
            }
            catch (Exception ex)
            {
                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error modify order, ClientKey {0}, Error: {1}", clientKey, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderReplaceRefusedByService() { ClientKey = clientKey, RefuseReason = "System Error", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inex)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order modification to the client, ClientKey {0}, Error: {1}", clientKey, inex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }

        }

        #endregion Place / Modify / Cancel Orders

        #region Queries

        public static SingleOrder GetOrder(long orderID)
        {
            return m_orderID_ordersDetails[orderID];
        }

        public static SingleOrder GetOrder(string bourseOrderID)
        {
            return m_orderID_ordersDetails.Values.SingleOrDefault(b => b.Data[SingleOrderProperties.BourseOrderID].ToString() == bourseOrderID);
        }

        public static SingleOrder GetOrder(string clOrdID, bool isOrig) // to avoid ambiguous call
        {
            return m_orderID_ordersDetails.Values.SingleOrDefault(b => b.Data[SingleOrderProperties.ClOrderID].ToString() == clOrdID);
        }

        internal static SingleOrder GetOrder(Guid requesterOrderID)
        {
            if (!m_ReqOrdID_OrdID.ContainsKey(requesterOrderID))
            {
                return null;
            }
            long clOrderID = m_ReqOrdID_OrdID[requesterOrderID];
            if (!m_orderID_ordersDetails.ContainsKey(clOrderID))
            {
                return null;
            }
            return m_orderID_ordersDetails[m_ReqOrdID_OrdID[requesterOrderID]];
        }

        internal static string GetOrdSessionIfAvailable(long ordID)
        {
            if (m_OrdID_username.ContainsKey(ordID))
            {
                string sessionKey = m_OrdID_username[ordID];
                if (Sessions.IsOnlineOrHasOfflineUpdates(sessionKey))
                    return sessionKey;
            }
            return null;
        }

        internal static bool CallbackHasReqOrdID(string username, Guid requesterOrderID)
        {
            if (!m_username_ReqOrdIDs.ContainsKey(username))
            {
                return false;
            }
            if(m_requestOrdersIdList.Contains(requesterOrderID) == true)
            {
                return true;
            }
            else
            {
                return false;
            }
           //return m_username_ReqOrdIDs[username].Contains(requesterOrderID);
        }

        #endregion Queries

        #region Helpers
        private static void RemoveOrderRef(long orderID)
        {
            lock (m_syncObject)
            {
                SingleOrder order = m_orderID_ordersDetails[orderID];
                Guid requesterOrderID = (Guid)order.Data[SingleOrderProperties.RequesterOrderID];
                string username = m_OrdID_username[orderID];
                m_ReqOrdID_OrdID.Remove(requesterOrderID);
                m_username_ReqOrdIDs[username].Remove(requesterOrderID);
                m_OrdID_username.Remove(orderID);
                m_orderID_ordersDetails.Remove(orderID);
            }
        }


        private static void RemoveOrderRef(long orderID,Guid requesterOrderID)
        {
            lock (m_syncObject)
            {
               
               
                m_ReqOrdID_OrdID.Remove(requesterOrderID);

                if (m_OrdID_username.ContainsKey(orderID))
                {
                    string username = m_OrdID_username[orderID];
                    m_username_ReqOrdIDs[username].Remove(requesterOrderID);
                }
                                   
                m_OrdID_username.Remove(orderID);
                             
                m_orderID_ordersDetails.Remove(orderID);

                
            }
        }

        public static bool HasExecutionID(string execID)
        {
            return m_handledExecutionIDs.Contains(execID);
        }

        /// <summary>
        /// returns false if ExecID already existed
        /// </summary>
        /// <param name="execID"></param>
        /// <returns></returns>
        public static bool AddExecutionID(string execID)
        {
            lock (m_handledExecutionIDs)
            {
                if (!m_handledExecutionIDs.Contains(execID))
                {
                    m_handledExecutionIDs.Add(execID);
                    return true;
                }
                return false;
            }
        }

        public static void UpdateBourseOrderID(long clOrderID, string bourseOrderID)
        {
            m_orderID_ordersDetails[clOrderID].Data[SingleOrderProperties.BourseOrderID] = bourseOrderID;
        }

        

        #endregion Helpers

        #region Monitor

        internal static List<SingleOrder> monitor_GetOrders(string side, string securityCode)
        {
            return m_orderID_ordersDetails.Values.Where(o => o.Data[SingleOrderProperties.OrderSide].ToString() == side && o.Data[SingleOrderProperties.SecurityCode].ToString() == securityCode).ToList();
        }
    

        #endregion Monitor

              
        //internal static void HandleAllocationNewOrderRefused(AllocRes mcsdResponseMsg)
        //{
        //    long orderID = -1;
        //    string username = string.Empty; ;
        //    SingleOrder order = null;
        //    Guid requesterOrderID = new Guid();
        //    try
        //    {
        //        string rejectMessage = string.Empty;
        //        try
        //        {
        //            OpVal[] opVals = mcsdResponseMsg.Fields;
        //            Dictionary<string, object> receivedFeilds = opVals.ToDictionary(item => item.Operand, item => item.Value);

        //            rejectMessage = receivedFeilds[ALLOC_RES_FIELDS.ERR_MSG].ToString();
        //        }
        //        catch (Exception exp)
        //        {
        //            rejectMessage = "MCSD System Error";
        //            SystemLogger.WriteOnConsoleAsync(true, string.Format("Couldn't get MCSD reject message. Error Deatails : {0}", exp.ToString()), ConsoleColor.Red, ConsoleColor.White, true);
        //        }

        //        requesterOrderID = mcsdResponseMsg.ReqID;
        //        orderID = m_ReqOrdID_OrdID[requesterOrderID];
        //        username = m_OrdID_username[orderID];
        //        order = m_orderID_ordersDetails[orderID];  // get order from MCSD pending orders list

        //        string orderType = order.Data[SingleOrderProperties.OrderType].ToString();
               
        //        string timeInForce = order.Data[SingleOrderProperties.TimeInForce].ToString();

        //        string OrderStatus = "Rejected MCSD";
        //        //string OriginalOrderStatus = "PendingNew";
        //        string ExecType = "Rejected MCSD";
        //        string Note = "Sell order allocation rejected from MCSD";
        //        bool IsPendingMcsd = false;

        //        using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
        //        {
        //            DatabaseMethods db = new DatabaseMethods();

        //          //  order.Data[SingleOrderProperties.OrderStatus] = OrderStatus;
        //          ////  order.Data[SingleOrderProperties.OriginalOrderStatus] = OriginalOrderStatus;
        //          //  order.Data[SingleOrderProperties.ExecType] = ExecType;
        //          //  order.Data[SingleOrderProperties.Note] = Note;
        //          //  order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;

        //            Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

        //            orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderStatus).ColumnName, OrderStatus);
        //           // orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderStatus).ColumnName, OriginalOrderStatus);
        //            orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecType).ColumnName, ExecType);
        //            orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, Note);
        //            orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, IsPendingMcsd);
        //            orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

        //            Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
        //            orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

        //            Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);//order.Data[SingleOrderProperties.CurrentPrice]
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);//order.Data[SingleOrderProperties.CurrentQuantity]
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, order.Data[SingleOrderProperties.AON]); //order.Data[SingleOrderProperties.AON]
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedMinQty).ColumnName, order.Data[SingleOrderProperties.MinQty]); // order.Data[SingleOrderProperties.MinQty]
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, ExecType);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, OrderStatus);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, Note);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsModifyRequest).ColumnName, false);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, false);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedOrderType).ColumnName, orderType);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);
        //            ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedTimeInForce).ColumnName, timeInForce);

        //            db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

        //            //Update orders dictionaries.
        //            // remove order from MCSD dictioanry
        //          //  m_orderID_ordersDetails_MCSD.Remove(orderID);
        //            RemoveOrderRef(orderID, requesterOrderID);
        //            ////clOrderID
        //            //string clOrderID = string.Format("{0}-{1}", orderID.ToString(), "1");
        //            Guid clientKey = Sessions.GetSessionKey(username);
        //            Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRejectionResponse() { ClientKey = clientKey, RejectionReason = rejectMessage, OrderStatus = "Rejected MCSD", RequesterOrderID = requesterOrderID } });

        //            ts.Complete();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
               
        //        Counters.IncrementCounter(CountersConstants.ExceptionMessages);
        //        Guid clientKey = Sessions.GetSessionKey(username);
        //        SystemLogger.WriteOnConsoleAsync(true, string.Format("Error in method HandleAllocationNewOrderRefused(), ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
        //        if (orderID > -1)
        //        { RemoveOrderRef(orderID, requesterOrderID); }

        //        try
        //        {
        //            Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRefusedByService() { ClientKey = clientKey, RefuseMessage = "System Erorr", RequesterOrderID = requesterOrderID } });
        //        }
        //        catch (Exception inEx)
        //        {
        //            Counters.IncrementCounter(CountersConstants.ExceptionMessages);
        //            SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order to the client while placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, inEx.Message), ConsoleColor.Red, ConsoleColor.White, false);
        //        }
        //    }
        //}

        internal static void ModifyOrderAllocationAccepted(AllocRes mcsdResponseMsg)
        {
            long orderID = -1;
            string username = string.Empty; ;
            SingleOrder order = null;
            order.Data[SingleOrderProperties.IsPendingMcsd] = false;

            Guid requesterOrderID = mcsdResponseMsg.ReqID;

            orderID = m_ReqOrdID_OrdID[requesterOrderID];

            username = m_OrdID_username[orderID];

            order = m_orderID_ordersDetails[orderID];


            Guid sessionKey = Sessions.GetSessionKey(username);

            ModifyOrderFIXGatway(username, sessionKey, requesterOrderID, orderID, (int)order.Data[SingleOrderProperties.RequestedQuantity],
                                (double)order.Data[SingleOrderProperties.RequestedPrice],
                                (string)order.Data[SingleOrderProperties.RequestedOrderType], (string)order.Data[SingleOrderProperties.RequestedTimeInForce], order.OptionalParams);
        }

        private static bool IsMCSDSellAllocationRequired(int Newquantity, SingleOrder order, out int allocDirection)
        {
            bool isMcsdAlloc = false;
            allocDirection = 0;
            int CurrentQuantity = (int)order.Data[SingleOrderProperties.CurrentQuantity];
            if (CurrentQuantity == Newquantity)
            {
                allocDirection = 0; // no allocation required.
                return isMcsdAlloc = false;

            }
            if (Newquantity - CurrentQuantity > 0)
            {
                allocDirection = 1;  // allocatin increased
                return isMcsdAlloc = true;
            }
            else
            {
                allocDirection = -1;  // allocatin decreased.
                return isMcsdAlloc = true;
            }


            return isMcsdAlloc;
        }

        private static bool IsMCSDSellAllocationRequired(int Newquantity, SingleOrder order)
        {
            bool isMcsdAlloc = false;
           
            int CurrentQuantity = (int)order.Data[SingleOrderProperties.CurrentQuantity];
            if (CurrentQuantity == Newquantity)
            {
                // no allocation required.
                return isMcsdAlloc = false;

            }
            if (Newquantity - CurrentQuantity > 0)
            {
                // allocatin increased
                return isMcsdAlloc = true;
            }
            else if (Newquantity - CurrentQuantity < 0)
            {
                 // allocatin decreased.
                return isMcsdAlloc = true;
            }


            return isMcsdAlloc;
        }
            
        internal static void CancelOrderAllocationAccepted(AllocRes mcsdResponseMsg)
        {
            long orderID = -1;
            string username = string.Empty; ;
            SingleOrder order = null;
            order.Data[SingleOrderProperties.IsPendingMcsd] = false;

            Guid requesterOrderID = mcsdResponseMsg.ReqID;

            orderID = m_ReqOrdID_OrdID[requesterOrderID];

            username = m_OrdID_username[orderID];

            order = m_orderID_ordersDetails[orderID];


            Guid sessionKey = Sessions.GetSessionKey(username);

            CancelOrderFixGatway(username, sessionKey, requesterOrderID, orderID);
        }
        
        internal static void HandleAllocationOrderRefused(AllocRes mcsdResponseMsg)
        {
            long orderID = -1;
            string username = string.Empty; ;
            SingleOrder order = null;
            Guid requesterOrderID = new Guid();
            try
            {
                string rejectMessage = string.Empty;
                try
                {
                    OpVal[] opVals = mcsdResponseMsg.Fields;
                    Dictionary<string, object> receivedFeilds = opVals.ToDictionary(item => item.Operand, item => item.Value);

                    rejectMessage = receivedFeilds[ALLOC_RES_FIELDS.ERR_MSG].ToString();
                }
                catch (Exception exp)
                {
                    rejectMessage = "MCSD System Error";
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Couldn't get MCSD reject message. Error Deatails : {0}", exp.ToString()), ConsoleColor.Red, ConsoleColor.White, true);
                }

                requesterOrderID = mcsdResponseMsg.ReqID;
                orderID = m_ReqOrdID_OrdID[requesterOrderID];
                username = m_OrdID_username[orderID];
                order = m_orderID_ordersDetails[orderID];  // get order from MCSD pending orders list

                string orderType = order.Data[SingleOrderProperties.OrderType].ToString();

                string timeInForce = order.Data[SingleOrderProperties.TimeInForce].ToString();

                string OrderStatus = "Rejected MCSD";
                //string OriginalOrderStatus = "PendingNew";
                string ExecType = "Rejected MCSD";
                string Note = "Sell order allocation rejected from MCSD";
                bool IsPendingMcsd = false;

                using (System.Transactions.TransactionScope ts = new System.Transactions.TransactionScope())
                {
                    DatabaseMethods db = new DatabaseMethods();

                    //  order.Data[SingleOrderProperties.OrderStatus] = OrderStatus;
                    ////  order.Data[SingleOrderProperties.OriginalOrderStatus] = OriginalOrderStatus;
                    //  order.Data[SingleOrderProperties.ExecType] = ExecType;
                    //  order.Data[SingleOrderProperties.Note] = Note;
                    //  order.Data[SingleOrderProperties.ModifiedDateTime] = DateTime.Now;

                    Dictionary<string, object> orders_Columns = new Dictionary<string, object>();

                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderStatus).ColumnName, OrderStatus);
                    // orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OriginalOrderStatus).ColumnName, OriginalOrderStatus);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ExecType).ColumnName, ExecType);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.Note).ColumnName, Note);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.IsPendingMcsd).ColumnName, IsPendingMcsd);
                    orders_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.ModifiedDateTime).ColumnName, order.Data[SingleOrderProperties.ModifiedDateTime]);

                    Dictionary<string, object> orders_Filters = new Dictionary<string, object>();
                    orders_Filters.Add(PropColMapper.GetColumnByProperty(SingleOrderProperties.TableName, SingleOrderProperties.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);

                    Dictionary<string, object> ordersDetails_Columns = new Dictionary<string, object>();
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderID).ColumnName, order.Data[SingleOrderProperties.OrderID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ClOrderID).ColumnName, order.Data[SingleOrderProperties.ClOrderID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrigClOrdID).ColumnName, order.Data[SingleOrderProperties.OrigClOrdID]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AvgPrice).ColumnName, order.Data[SingleOrderProperties.AvgPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecPrice).ColumnName, order.Data[SingleOrderProperties.LastExecPrice]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedPrice).ColumnName, order.Data[SingleOrderProperties.CurrentPrice]);//order.Data[SingleOrderProperties.CurrentPrice]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.CurrentQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecutedQuantity).ColumnName, order.Data[SingleOrderProperties.ExecutedQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.LastExecQuantity).ColumnName, order.Data[SingleOrderProperties.LastExecQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RemainingQuantity).ColumnName, order.Data[SingleOrderProperties.RemainingQuantity]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedQuantity).ColumnName, order.Data[SingleOrderProperties.CurrentQuantity]);//order.Data[SingleOrderProperties.CurrentQuantity]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.AON).ColumnName, order.Data[SingleOrderProperties.AON]); //order.Data[SingleOrderProperties.AON]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedMinQty).ColumnName, order.Data[SingleOrderProperties.MinQty]); // order.Data[SingleOrderProperties.MinQty]
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.ExecType).ColumnName, ExecType);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderStatus).ColumnName, OrderStatus);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.Note).ColumnName, Note);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsModifyRequest).ColumnName, false);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.IsUserRequest).ColumnName, false);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.DateTime).ColumnName, DateTime.Now);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.OrderType).ColumnName, order.Data[SingleOrderProperties.OrderType]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedOrderType).ColumnName, orderType);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.TimeInForce).ColumnName, order.Data[SingleOrderProperties.TimeInForce]);
                    ordersDetails_Columns.Add(PropColMapper.GetColumnByProperty(SingleOrdDetailsProps.TableName, SingleOrdDetailsProps.RequestedTimeInForce).ColumnName, timeInForce);

                    db.UpdateOrderDetails(orders_Columns, orders_Filters, ordersDetails_Columns);

                    //Update orders dictionaries.
                    // remove order from MCSD dictioanry
                    //  m_orderID_ordersDetails_MCSD.Remove(orderID);
                   // RemoveOrderRef(orderID, requesterOrderID);


                    ////clOrderID
                    //string clOrderID = string.Format("{0}-{1}", orderID.ToString(), "1");
                    Guid clientKey = Sessions.GetSessionKey(username);
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRejectionResponse() { ClientKey = clientKey, RejectionReason = rejectMessage, OrderStatus = "Rejected MCSD", RequesterOrderID = requesterOrderID } });

                    ts.Complete();
                }
            }
            catch (Exception ex)
            {

                Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                Guid clientKey = Sessions.GetSessionKey(username);
                SystemLogger.WriteOnConsoleAsync(true, string.Format("Error in method HandleAllocationNewOrderRefused(), ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, ex.Message), ConsoleColor.Red, ConsoleColor.White, false);
                if (orderID > -1)
                { RemoveOrderRef(orderID, requesterOrderID); }

                try
                {
                    Sessions.Push(username, new IResponseMessage[] { new Fix_OrderRefusedByService() { ClientKey = clientKey, RefuseMessage = "System Erorr", RequesterOrderID = requesterOrderID } });
                }
                catch (Exception inEx)
                {
                    Counters.IncrementCounter(CountersConstants.ExceptionMessages);
                    SystemLogger.WriteOnConsoleAsync(true, string.Format("Error sending refused order to the client while placing order, ClientKey {0}, Req Order ID {1}, Error: {2}", clientKey, requesterOrderID, inEx.Message), ConsoleColor.Red, ConsoleColor.White, false);
                }
            }
        }
    }
}